Only in MCP-LTS/src/minecraft: armor
Only in MCP-LTS/src/minecraft/com: mojontwins
Only in MCP-LTS/src/minecraft: mob
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/GameSettings.java MCP-LTS/src/minecraft/net/minecraft/client/GameSettings.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/GameSettings.java	2021-11-10 11:11:51.654940600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/GameSettings.java	2021-12-16 21:01:03.841959100 +0100
@@ -14,7 +14,7 @@
     public boolean sound = true;
     public boolean invertMouse = false;
     public boolean showFPS = false;
-    public int renderDistance = 0;
+    public int renderDistance = 1;
     public boolean fancyGraphics = true;
     public boolean anaglyph = false;
     public boolean limitFramerate = false;
@@ -23,12 +23,13 @@
     public KeyBinding keyBindBack = new KeyBinding("Back", 31);
     public KeyBinding keyBindRight = new KeyBinding("Right", 32);
     public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
-    public KeyBinding keyBindInventory = new KeyBinding("Inventory", 23);
+    public KeyBinding keyBindInventory = new KeyBinding("Inventory", 18);
     public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
-    private KeyBinding keyBindChat = new KeyBinding("Chat", 20);
+    public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
     public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
     public KeyBinding keyBindSave = new KeyBinding("Save location", 28);
     public KeyBinding keyBindLoad = new KeyBinding("Load location", 19);
+    public KeyBinding keyBindSneak = new KeyBinding("Sneak", 42);
     public KeyBinding[] keyBindings;
     private Minecraft mc;
     private File optionsFile;
@@ -37,8 +38,8 @@
     public boolean thirdPersonView;
 
     public GameSettings(Minecraft var1, File var2) {
-        this.keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindSave, this.keyBindLoad};
-        this.numberOfOptions = 9;
+        this.keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindSave, this.keyBindLoad};
+        this.numberOfOptions = 10;
         this.difficulty = 2;
         this.thirdPersonView = false;
         this.mc = var1;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/Minecraft.java MCP-LTS/src/minecraft/net/minecraft/client/Minecraft.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/Minecraft.java	2021-11-10 11:11:51.701815400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/Minecraft.java	2021-12-14 16:21:00.056470900 +0100
@@ -9,6 +9,8 @@
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.nio.IntBuffer;
+import java.util.List;
+
 import javax.swing.JOptionPane;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.gui.GuiErrorScreen;
@@ -31,6 +33,7 @@
 import net.minecraft.client.renderer.RenderEngine;
 import net.minecraft.client.renderer.RenderGlobal;
 import net.minecraft.client.renderer.WorldRenderer;
+import net.minecraft.client.renderer.block.TextureFX;
 import net.minecraft.client.renderer.block.TextureFlamesFX;
 import net.minecraft.client.renderer.block.TextureGearsFX;
 import net.minecraft.client.renderer.block.TextureLavaFX;
@@ -43,6 +46,7 @@
 import net.minecraft.game.entity.player.InventoryPlayer;
 import net.minecraft.game.item.Item;
 import net.minecraft.game.item.ItemStack;
+import net.minecraft.game.level.Spawner;
 import net.minecraft.game.level.World;
 import net.minecraft.game.level.generator.LevelGenerator;
 import org.lwjgl.BufferUtils;
@@ -58,6 +62,8 @@
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GLContext;
 
+import com.mojontwins.modloader.ModLoader;
+
 public final class Minecraft implements Runnable {
     public PlayerController playerController = new PlayerControllerSP(this);
     private boolean fullscreen = false;
@@ -68,7 +74,7 @@
     public World theWorld;
     public RenderGlobal renderGlobal;
     public EntityPlayerSP thePlayer;
-    public EffectRenderer effectRenderer;
+    public static EffectRenderer effectRenderer;
     public Session session = null;
     public String minecraftUri;
     public Canvas mcCanvas;
@@ -93,7 +99,7 @@
     private MinecraftApplet mcApplet;
     public SoundManager sndManager;
     public MouseHelper mouseHelper;
-    public File mcDataDir;
+    public static File mcDataDir;
     private String server;
     private TextureWaterFX textureWaterFX;
     private TextureLavaFX textureLavaFX;
@@ -310,7 +316,16 @@
 
         long var23 = System.currentTimeMillis();
         int var28 = 0;
-
+        
+        try {
+        	ModLoader.init ();
+        	ModLoader.registerAllTextureOverrides (this.renderEngine);
+        } catch (Exception e) {
+        	e.printStackTrace();
+        	this.shutdownMinecraftApplet();
+        	return;
+        }
+        	
         try {
             while(this.running) {
                 if (this.theWorld != null) {
@@ -416,6 +431,21 @@
             this.displayGuiScreen(new GuiIngameMenu());
         }
     }
+    
+    private boolean itemRightClick(ItemStack var2, int var3, World var5) {
+    	EntityPlayerSP var7 = this.thePlayer;
+        ItemStack var4 = var2.getItem().onItemRightClick(var2, var5, var7);
+        
+        if (var4 != var2 || var4 != null && var4.stackSize != var3) {
+            this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = var4;
+            this.entityRenderer.itemRenderer.resetEquippedProgress();
+            if (var4.stackSize == 0) {
+                this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
+            }
+            return true;
+        }
+        return false;
+    }
 
     private void clickMouse(int var1) {
         if (var1 != 0 || this.leftClickCounter <= 0) {
@@ -423,28 +453,19 @@
                 this.entityRenderer.itemRenderer.equippedItemRender();
             }
 
-            ItemStack var2;
-            int var3;
-            World var5;
-            if (var1 == 1 && (var2 = this.thePlayer.inventory.getCurrentItem()) != null) {
-                var3 = var2.stackSize;
-                EntityPlayerSP var7 = this.thePlayer;
-                var5 = this.theWorld;
-                ItemStack var4;
-                if ((var4 = var2.getItem().onItemRightClick(var2, var5, var7)) != var2 || var4 != null && var4.stackSize != var3) {
-                    this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = var4;
-                    this.entityRenderer.itemRenderer.resetEquippedProgress();
-                    if (var4.stackSize == 0) {
-                        this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
-                    }
-                }
-            }
-
+            ItemStack var2 = this.thePlayer.inventory.getCurrentItem();
+            int var3 = 0;
+            if (var2 != null) var3 = var2.stackSize;
+            World var5 = this.theWorld;
+            
             if (this.objectMouseOver == null) {
                 if (var1 == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
                     this.leftClickCounter = 10;
                 }
-
+                
+                if (var1 == 1 && var2 != null) {
+                    itemRightClick (var2, var3, var5);
+                }
             } else {
                 ItemStack var9;
                 if (this.objectMouseOver.typeOfHit == 1) {
@@ -454,6 +475,11 @@
                         EntityPlayerSP var12 = var10000;
                         InventoryPlayer var11;
                         int var19 = (var9 = (var11 = var10000.inventory).getStackInSlot(var11.currentItem)) != null ? Item.itemsList[var9.itemID].getDamageVsEntity() : 1;
+                        
+                        // var19 : hit strength.
+                        // var14 : Entity being hit
+                        var19 = ModLoader.hookAttackStrengthModifier (this.thePlayer, var14, var19);
+                        
                         int var17 = var19;
                         if (var19 > 0) {
                             var14.attackEntityFrom(var12, var17);
@@ -469,6 +495,7 @@
                         return;
                     }
                 } else if (this.objectMouseOver.typeOfHit == 0) {
+
                     int var10 = this.objectMouseOver.blockX;
                     var3 = this.objectMouseOver.blockY;
                     int var13 = this.objectMouseOver.blockZ;
@@ -491,10 +518,18 @@
                             return;
                         }
 
+                        boolean usedSuccessfully = false;
+                        if (var1 == 1 && var2 != null) {
+                        	ItemStack itemStack = this.thePlayer.inventory.getCurrentItem();
+                            int stackSize = 0; if (itemStack != null) stackSize = itemStack.stackSize;
+                        	usedSuccessfully = itemRightClick (itemStack, stackSize, var5);
+                        }
+                        
                         var16 = var9.stackSize;
                         int var18 = var15;
                         var5 = this.theWorld;
-                        if (var9.getItem().onItemUse(var9, var5, var10, var3, var13, var18)) {
+                      
+                        if (!usedSuccessfully && var9.getItem().onItemUse(var9, this.thePlayer, var5, var10, var3, var13, var18)) {
                             this.entityRenderer.itemRenderer.equippedItemRender();
                         }
 
@@ -788,7 +823,7 @@
     }
 
     public final void generateLevel(int var1, int var2, int var3, int var4) {
-        this.setLevel((World)null);
+    	this.setLevel((World)null);
         System.gc();
         String var5 = this.session != null ? this.session.username : "anonymous";
         LevelGenerator var6;
@@ -805,9 +840,16 @@
             var3 = var1 /= 2;
             var8 = 256;
         }
-
+        
+        // ModLoader
+        Spawner.resetMobHashMaps();
+        ModLoader.populateMobsHashMap(var4);
+        
         World var7 = var6.generate(var5, var1, var3, var8);
         this.setLevel(var7);
+        
+        // ModLoader
+        ModLoader.hookGameStart(this);
     }
 
     public final void setLevel(World var1) {
@@ -823,8 +865,10 @@
                 this.theWorld = var1;
             }
         } catch (Throwable var3) {
+        	System.out.println ("Proxy is misbehaving. Setting the world as a failsafe.!");
+        	this.theWorld = var1;
         }
-
+        
         if (var1 != null) {
             var1.load();
             this.playerController.onWorldChange(var1);
@@ -855,13 +899,25 @@
             this.textureWaterFX.textureId = 0;
             this.textureLavaFX.textureId = 0;
             int var4 = this.renderEngine.getTexture("/water.png");
+            
+            // This bit seems to blame of putting lava around the world for custom default fluids.
             if (var1.defaultFluid == Block.waterMoving.blockID) {
                 this.textureWaterFX.textureId = var4;
-            } else {
+            } else if (var1.defaultFluid == Block.lavaMoving.blockID){
                 this.textureLavaFX.textureId = var4;
+            } else {
+            	// ModLoader: set up a proper custom fluid for the oob renderer
+            	// Quick search: Is there a texture FX with iconindex == var1.defaultFluid?
+            	List textureList = this.renderEngine.getTextureList();
+            	for(int i = 0; i < textureList.size(); ++i) {
+            		TextureFX textureFX = (TextureFX)textureList.get(i);
+            		if (textureFX.iconIndex == Block.blocksList[var1.defaultFluid].blockIndexInTexture) {
+            			textureFX.textureId = var4;
+            		}
+            	}
             }
         }
 
         System.gc();
-    }
+    }    
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/ThreadDownloadResources.java MCP-LTS/src/minecraft/net/minecraft/client/ThreadDownloadResources.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/ThreadDownloadResources.java	2021-11-10 11:11:51.717440600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/ThreadDownloadResources.java	2021-11-28 16:20:34.867202200 +0100
@@ -26,9 +26,12 @@
     }
 
     public final void run() {
+    	System.out.println ("Resources download thread started.");
+    	System.out.println ("Resources folder: " + this.resourcesFolder);
         try {
             final ArrayList<String> list = new ArrayList<String>();
-            final URL url = new URL("http://www.minecraft.net/resources/");
+            //final URL url = new URL("http://www.minecraft.net/resources/");
+            final URL url = new URL("http://betacraft.uk/resources/");
             final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(url.openStream()));
             String line;
             while ((line = bufferedReader.readLine()) != null) {
@@ -45,14 +48,17 @@
                         final String child = (split = s.split(","))[0];
                         final int int1 = Integer.parseInt(split[1]);
                         Long.parseLong(split[2]);
-                        final File file;
-                        if (!(file = new File(this.resourcesFolder, child)).exists() || file.length() != int1) {
+                        final File file = new File(this.resourcesFolder, child);
+                        if (!file.exists() || file.length() != int1) {
+                        	URL fileUrl = new URL(context, child.replaceAll(" ", "%20"));
+                        	System.out.println ("+ " + file + " does not exist or has changed, downloading from " + fileUrl);
                             file.getParentFile().mkdirs();
-                            this.downloadResource(new URL(context, child.replaceAll(" ", "%20")), file);
+                            this.downloadResource(fileUrl, file);
                             if (this.closing) {
                                 break Label_0334;
                             }
-                        }
+                        } else System.out.println ("+ " + file + " already exists.");
+                        
                         final Minecraft mc = this.mc;
                         final String s2 = child;
                         final File file2 = file;
@@ -83,6 +89,9 @@
         catch (IOException ex2) {
             ex2.printStackTrace();
         }
+        finally {
+        	System.out.println ("Resources download thread finished.");
+        }
     }
 
     private void downloadResource(URL var1, File var2) throws IOException {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiCrafting.java MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiCrafting.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiCrafting.java	2021-11-10 11:11:51.779940400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiCrafting.java	2021-11-11 10:51:04.432177600 +0100
@@ -9,6 +9,8 @@
 import net.minecraft.game.recipe.CraftingManager;
 import org.lwjgl.opengl.GL11;
 
+import com.mojontwins.modloader.ModCraftingManager;
+
 public final class GuiCrafting extends GuiContainer {
     private InventoryCrafting inventoryCrafting = new InventoryCrafting(this, 3, 3);
     private IInventory iInventory = new InventoryCraftResult();
@@ -63,7 +65,12 @@
             }
         }
 
-        this.iInventory.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(var1));
+        ItemStack itemStack = CraftingManager.getInstance().findMatchingRecipe(var1);
+        if (itemStack == null) {
+            itemStack = ModCraftingManager.findMatchingRecipe(var1);
+        }
+
+        this.iInventory.setInventorySlotContents(0, itemStack);
     }
 
     protected final void drawGuiContainerForegroundLayer() {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiGameOver.java MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiGameOver.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiGameOver.java	2021-11-10 11:11:51.779940400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiGameOver.java	2021-11-26 23:05:54.453154400 +0100
@@ -2,6 +2,8 @@
 
 import org.lwjgl.opengl.GL11;
 
+import com.mojontwins.modloader.ModLoader;
+
 public final class GuiGameOver extends GuiScreen {
     public final void initGui() {
         this.controlList.clear();
@@ -22,7 +24,9 @@
         }
 
         if (var1.id == 1) {
-            this.mc.displayGuiScreen(new GuiNewLevel(this));
+        	GuiNewLevel guiNewLevel = new GuiNewLevel(this);
+        	ModLoader.addNewLevelMenuEntries(guiNewLevel);
+            this.mc.displayGuiScreen(guiNewLevel);
         }
 
         if (this.mc.session != null && var1.id == 2) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiIngameMenu.java MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiIngameMenu.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiIngameMenu.java	2021-11-10 11:11:51.795565600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiIngameMenu.java	2021-11-26 23:06:46.128749200 +0100
@@ -1,5 +1,7 @@
 package net.minecraft.client.gui;
 
+import com.mojontwins.modloader.ModLoader;
+
 public final class GuiIngameMenu extends GuiScreen {
     public final void initGui() {
         this.controlList.clear();
@@ -21,7 +23,9 @@
         }
 
         if (var1.id == 1) {
-            this.mc.displayGuiScreen(new GuiNewLevel(this));
+        	GuiNewLevel guiNewLevel = new GuiNewLevel(this);
+        	ModLoader.addNewLevelMenuEntries(guiNewLevel);
+            this.mc.displayGuiScreen(guiNewLevel);
         }
 
         if (this.mc.session != null) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java	2021-11-10 11:11:51.811205100 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/gui/GuiMainMenu.java	2021-11-26 23:07:24.436828500 +0100
@@ -2,6 +2,9 @@
 
 import net.minecraft.client.renderer.Tessellator;
 import org.lwjgl.opengl.GL11;
+
+import com.mojontwins.modloader.ModLoader;
+
 import util.MathHelper;
 
 public final class GuiMainMenu extends GuiScreen {
@@ -39,7 +42,9 @@
         }
 
         if (var1.id == 1) {
-            this.mc.displayGuiScreen(new GuiNewLevel(this));
+        	GuiNewLevel guiNewLevel = new GuiNewLevel(this);
+        	ModLoader.addNewLevelMenuEntries(guiNewLevel);
+            this.mc.displayGuiScreen(guiNewLevel);
         }
 
         if (this.mc.session != null && var1.id == 2) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/model/ModelRenderer.java MCP-LTS/src/minecraft/net/minecraft/client/model/ModelRenderer.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/model/ModelRenderer.java	2021-11-10 11:11:51.889329300 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/model/ModelRenderer.java	2021-11-22 23:35:25.212761700 +0100
@@ -26,6 +26,10 @@
         this.textureOffsetY = var2;
     }
 
+    public void addBox(float var1, float var2, float var3, int var4, int var5, int var6) {
+        this.addBox(var1, var2, var3, var4, var5, var6, 0.0F);
+    }
+    
     public final void addBox(float var1, float var2, float var3, int var4, int var5, int var6, float var7) {
         this.corners = new PositionTextureVertex[8];
         this.faces = new TexturedQuad[6];
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/particle/EntityFX.java MCP-LTS/src/minecraft/net/minecraft/client/particle/EntityFX.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/particle/EntityFX.java	2021-11-10 11:11:51.936190300 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/particle/EntityFX.java	2021-12-20 16:11:57.521825600 +0100
@@ -100,7 +100,7 @@
     protected final void writeEntityToNBT(NBTTagCompound var1) {
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return null;
     }
 
Only in MCP-LTS/src/minecraft/net/minecraft/client/particle: EntityStatusEffectFX.java
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/physics/AxisAlignedBB.java MCP-LTS/src/minecraft/net/minecraft/client/physics/AxisAlignedBB.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/physics/AxisAlignedBB.java	2021-11-10 11:11:51.967441200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/physics/AxisAlignedBB.java	2021-12-15 13:51:45.640799000 +0100
@@ -267,4 +267,8 @@
             return var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
         }
     }
+    
+    public AxisAlignedBB getOffsetBoundingBox(float x, float y, float z) {
+    	return new AxisAlignedBB (this.minX + x, this.minY + y, this.minZ + z, this.maxX + x, this.maxY + y, this.maxZ + z);
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/EntityPlayerSP.java MCP-LTS/src/minecraft/net/minecraft/client/player/EntityPlayerSP.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/EntityPlayerSP.java	2021-11-10 11:11:51.967441200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/player/EntityPlayerSP.java	2021-12-20 16:13:16.991059000 +0100
@@ -37,6 +37,9 @@
 
     public final void onLivingUpdate() {
         this.movementInput.updatePlayerMoveState();
+        if (this.movementInput.sneak && this.ySize < 0.2F) {
+            this.ySize = 0.2F;
+        }
         super.onLivingUpdate();
     }
 
@@ -92,7 +95,7 @@
 
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "LocalPlayer";
     }
 
@@ -115,4 +118,8 @@
     public final void onItemPickup(Entity var1) {
         this.mc.effectRenderer.addEffect(new EntityPickupFX(this.mc.theWorld, var1, this, -0.5F));
     }
+    
+    public boolean isSneaking() {
+        return this.movementInput.sneak;
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/MovementInput.java MCP-LTS/src/minecraft/net/minecraft/client/player/MovementInput.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/MovementInput.java	2021-11-10 11:11:51.967441200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/player/MovementInput.java	2021-12-15 13:26:59.365133800 +0100
@@ -4,6 +4,7 @@
     public float moveStrafe = 0.0F;
     public float moveForward = 0.0F;
     public boolean jump = false;
+    public boolean sneak = false;
 
     public void updatePlayerMoveState() {
     }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/MovementInputFromOptions.java MCP-LTS/src/minecraft/net/minecraft/client/player/MovementInputFromOptions.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/MovementInputFromOptions.java	2021-11-10 11:11:51.967441200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/player/MovementInputFromOptions.java	2021-12-15 13:27:10.077786200 +0100
@@ -32,6 +32,10 @@
             var3 = 4;
         }
 
+        if (var1 == this.gameSettings.keyBindSneak.keyCode) {
+            var3 = 5;
+        }
+
         if (var3 >= 0) {
             this.movementKeyStates[var3] = var2;
         }
@@ -65,5 +69,10 @@
         }
 
         this.jump = this.movementKeyStates[4];
+        this.sneak = this.movementKeyStates[5];
+        if (this.sneak) {
+            this.moveStrafe = (float)((double)this.moveStrafe * 0.3D);
+            this.moveForward = (float)((double)this.moveForward * 0.3D);
+        }
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/PlayerController.java MCP-LTS/src/minecraft/net/minecraft/client/player/PlayerController.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/PlayerController.java	2021-11-10 11:11:51.967441200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/player/PlayerController.java	2021-11-18 23:07:16.570865700 +0100
@@ -26,7 +26,7 @@
         Block var5 = Block.blocksList[var4.getBlockId(var1, var2, var3)];
         byte var6 = var4.getBlockMetadata(var1, var2, var3);
         boolean var7 = var4.setBlockWithNotify(var1, var2, var3, 0);
-        if (var5 != null && var7) {
+        if (var5 != null && var7) { 
             this.mc.sndManager.playSound(var5.stepSound.stepSoundDir(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var5.stepSound.soundVolume + 1.0F) / 2.0F, var5.stepSound.soundPitch * 0.8F);
             var5.onBlockDestroyedByPlayer(var4, var1, var2, var3, var6);
         }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/PlayerControllerSP.java MCP-LTS/src/minecraft/net/minecraft/client/player/PlayerControllerSP.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/player/PlayerControllerSP.java	2021-11-10 11:11:51.983064800 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/player/PlayerControllerSP.java	2021-11-12 13:56:37.865299700 +0100
@@ -1,5 +1,7 @@
 package net.minecraft.client.player;
 
+import com.mojontwins.modloader.ModLoader;
+
 import net.minecraft.client.Minecraft;
 import net.minecraft.game.block.Block;
 import net.minecraft.game.item.Item;
@@ -34,7 +36,8 @@
         }
 
         if (var6 && this.mc.thePlayer.canHarvestBlock(Block.blocksList[var4])) {
-            Block.blocksList[var4].dropBlockAsItem(this.mc.theWorld, var1, var2, var3, var5);
+        	if (ModLoader.hookOnBlockHarvested (this.mc, this.mc.theWorld, var1, var2, var3, var4, var5) == false) 
+        		Block.blocksList[var4].dropBlockAsItem(this.mc.theWorld, var1, var2, var3, var5);
         }
 
         return var6;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/ItemRenderer.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/ItemRenderer.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/ItemRenderer.java	2021-11-10 11:11:52.045564600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/ItemRenderer.java	2021-11-17 12:51:30.863774400 +0100
@@ -7,6 +7,9 @@
 import net.minecraft.game.block.Block;
 import net.minecraft.game.item.ItemStack;
 import org.lwjgl.opengl.GL11;
+
+import com.mojontwins.modloader.ModLoader;
+
 import util.MathHelper;
 
 public final class ItemRenderer {
@@ -53,9 +56,19 @@
             }
 
             GL11.glScalef(0.4F, 0.4F, 0.4F);
-            if (this.itemToRender.itemID < 256 && Block.blocksList[this.itemToRender.itemID].getRenderType() == 0) {
+            int renderType;
+            if (this.itemToRender.itemID < 256 && 
+            	(
+            		(renderType = Block.blocksList[this.itemToRender.itemID].getRenderType()) == 0 ||
+                    ModLoader.renderBlockIsItemFull3D(renderType)
+            	)
+            ) {
                 GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, this.mc.renderEngine.getTexture("/terrain.png"));
-                this.renderBlocksInstance.renderBlockOnInventory(Block.blocksList[this.itemToRender.itemID]);
+                Block var8 = Block.blocksList[this.itemToRender.itemID];
+                if (renderType == 0)
+                	this.renderBlocksInstance.renderBlockOnInventory(var8);
+                else
+                	ModLoader.renderInvBlock(this.renderBlocksInstance, var8, renderType);
             } else {
                 if (this.itemToRender.itemID < 256) {
                     GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, this.mc.renderEngine.getTexture("/terrain.png"));
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/RenderBlocks.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/RenderBlocks.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/RenderBlocks.java	2021-11-10 11:11:52.061190800 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/RenderBlocks.java	2021-11-17 10:02:56.843375600 +0100
@@ -5,6 +5,8 @@
 import net.minecraft.game.level.World;
 import org.lwjgl.opengl.GL11;
 
+import com.mojontwins.modloader.ModLoader;
+
 public final class RenderBlocks {
     private World blockAccess;
     private int overrideBlockTexture = -1;
@@ -30,11 +32,11 @@
     }
 
     public final boolean renderBlockByRenderType(Block var1, int var2, int var3, int var4) {
-        int var5;
+        int var5 = var1.getRenderType();
         Tessellator var6;
         float var10;
         boolean var26;
-        if ((var5 = var1.getRenderType()) == 0) {
+        if (var5 == 0) {
             var6 = Tessellator.instance;
             var26 = false;
             if (this.flipTexture || var1.shouldSideBeRendered(this.blockAccess, var2, var3 - 1, var4, 0)) {
@@ -439,7 +441,7 @@
 
                         return true;
                     } else {
-                        return false;
+                        return ModLoader.renderWorldBlock(this, blockAccess, var2, var3, var4, var1, var5);
                     }
                 }
             }
@@ -801,8 +803,7 @@
                 Tessellator.setNormal(0.0F, -1.0F, 0.0F);
                 this.renderBlockTorch(var1, -0.5F, -0.5F, -0.5F, 0.0F, 0.0F);
                 var2.draw();
-            }
-
+            } 
         }
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/RenderEngine.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/RenderEngine.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/RenderEngine.java	2021-11-10 11:11:52.092440200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/RenderEngine.java	2021-12-01 08:20:58.299819300 +0100
@@ -173,27 +173,38 @@
     }
 
     public final void updateDynamicTextures() {
-        int var1;
-        TextureFX var2;
-        for(var1 = 0; var1 < this.textureList.size(); ++var1) {
-            (var2 = (TextureFX)this.textureList.get(var1)).anaglyphEnabled = this.options.anaglyph;
-            var2.onTick();
+    	// This method has been modified to allow for TextureFX in both atlases (originally just `terrain.png`)
+    	
+        int i = -1;
+        
+        for(int var1 = 0; var1 < this.textureList.size(); ++var1) {
+        	TextureFX textureFX = (TextureFX)this.textureList.get(var1);
+            textureFX.anaglyphEnabled = this.options.anaglyph;
+            textureFX.onTick();
             this.imageData.clear();
-            this.imageData.put(var2.imageData);
-            this.imageData.position(0).limit(var2.imageData.length);
-            GL11.glTexSubImage2D(3553 /*GL_TEXTURE_2D*/, 0, var2.iconIndex % 16 << 4, var2.iconIndex / 16 << 4, 16, 16, 6408 /*GL_RGBA*/, 5121 /*GL_UNSIGNED_BYTE*/, this.imageData);
+            this.imageData.put(textureFX.imageData);
+            this.imageData.position(0).limit(textureFX.imageData.length);
+            
+            if (textureFX.iconIndex != i) {
+            	textureFX.bindImage (this);
+            	i = textureFX.iconIndex;
+            }
+            
+            GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, textureFX.iconIndex % 16 << 4, textureFX.iconIndex / 16 << 4, 16, 16, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
         }
 
-        for(var1 = 0; var1 < this.textureList.size(); ++var1) {
-            if ((var2 = (TextureFX)this.textureList.get(var1)).textureId > 0) {
+        // I dunno what's this for but I will just leave it here...
+        
+        for(int var1 = 0; var1 < this.textureList.size(); ++var1) {
+        	TextureFX textureFX; 
+        	if ((textureFX = (TextureFX)this.textureList.get(var1)).textureId > 0) {
                 this.imageData.clear();
-                this.imageData.put(var2.imageData);
-                this.imageData.position(0).limit(var2.imageData.length);
-                GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, var2.textureId);
-                GL11.glTexSubImage2D(3553 /*GL_TEXTURE_2D*/, 0, 0, 0, 16, 16, 6408 /*GL_RGBA*/, 5121 /*GL_UNSIGNED_BYTE*/, this.imageData);
+                this.imageData.put(textureFX.imageData);
+                this.imageData.position(0).limit(textureFX.imageData.length);
+                GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureFX.textureId);
+                GL11.glTexSubImage2D(GL11.GL_TEXTURE_2D, 0, 0, 0, 16, 16,  GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, this.imageData);
             }
         }
-
     }
 
     public final void refreshTextures() {
@@ -240,4 +251,8 @@
             GL11.glBindTexture(3553 /*GL_TEXTURE_2D*/, var0);
         }
     }
+    
+    public List getTextureList () {
+    	return textureList;
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java	2021-11-10 11:11:52.108065400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/RenderGlobal.java	2021-11-16 09:40:57.608409500 +0100
@@ -9,10 +9,12 @@
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.particle.EntityBubbleFX;
 import net.minecraft.client.particle.EntityExplodeFX;
+import net.minecraft.client.particle.EntityFX;
 import net.minecraft.client.particle.EntityFlameFX;
 import net.minecraft.client.particle.EntityLavaFX;
 import net.minecraft.client.particle.EntitySmokeFX;
 import net.minecraft.client.particle.EntitySplashFX;
+import net.minecraft.client.particle.EntityStatusEffectFX;
 import net.minecraft.client.physics.AxisAlignedBB;
 import net.minecraft.client.physics.MovingObjectPosition;
 import net.minecraft.client.renderer.entity.RenderManager;
@@ -733,6 +735,10 @@
                 this.mc.effectRenderer.addEffect(new EntityLavaFX(this.worldObj, var2, var3, var4));
             } else if (var1 == "splash") {
                 this.mc.effectRenderer.addEffect(new EntitySplashFX(this.worldObj, var2, var3, var4));
+            } else if (var1 == "status_effect") {
+            	EntityStatusEffectFX entityFX = new EntityStatusEffectFX(this.worldObj, var2, var3, var4, 0, 0, 0);
+            	entityFX.setParticleColor(var5, var6, var7);
+            	this.mc.effectRenderer.addEffect(entityFX);            	
             } else {
                 if (var1 == "largesmoke") {
                     this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.worldObj, var2, var3, var4, 2.5F));
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/block/TextureFX.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/block/TextureFX.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/block/TextureFX.java	2021-11-10 11:11:52.139315500 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/block/TextureFX.java	2021-11-12 09:24:08.946269200 +0100
@@ -1,15 +1,32 @@
 package net.minecraft.client.renderer.block;
 
+import org.lwjgl.opengl.GL11;
+
+import net.minecraft.client.renderer.RenderEngine;
+
 public class TextureFX {
-    public byte[] imageData = new byte[1024];
+    public byte[] imageData;
     public int iconIndex;
-    public boolean anaglyphEnabled = false;
-    public int textureId = 0;
+    public boolean anaglyphEnabled;
+    public int textureId;
+    public int tileImage;
 
     public TextureFX(int var1) {
-        this.iconIndex = var1;
+        imageData = new byte[1024];
+        anaglyphEnabled = false;
+        textureId = 0;
+        tileImage = 0;
+        iconIndex = var1;
     }
 
     public void onTick() {
     }
+    
+    public void bindImage (RenderEngine renderEngine) {;
+    	if (tileImage == 0) {
+    		GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderEngine.getTexture("/terrain.png"));
+    	} else {
+    		GL11.glBindTexture(GL11.GL_TEXTURE_2D, renderEngine.getTexture("/gui/items.png"));
+    	}
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java	2021-11-10 11:11:52.217440700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/entity/RenderItem.java	2021-12-05 09:30:34.932622700 +0100
@@ -10,6 +10,9 @@
 import net.minecraft.game.entity.other.EntityItem;
 import net.minecraft.game.item.ItemStack;
 import org.lwjgl.opengl.GL11;
+
+import com.mojontwins.modloader.ModLoader;
+
 import util.MathHelper;
 
 public final class RenderItem extends Render {
@@ -24,8 +27,15 @@
     public final void renderItemIntoGUI(RenderEngine var1, ItemStack var2, int var3, int var4) {
         if (var2 != null) {
             int var9;
-            if (var2.itemID < 256 && Block.blocksList[var2.itemID].getRenderType() == 0) {
-                var9 = var2.itemID;
+            int renderType;
+
+            if (var2.itemID < 256 && 
+            	(
+            		(renderType = Block.blocksList[var2.itemID].getRenderType()) == 0 ||
+            		ModLoader.renderBlockIsItemFull3D(renderType)
+            	)
+            ) {
+            	var9 = var2.itemID;
                 RenderEngine.bindTexture(var1.getTexture("/terrain.png"));
                 Block var8 = Block.blocksList[var9];
                 GL11.glPushMatrix();
@@ -35,7 +45,10 @@
                 GL11.glRotatef(210.0F, 1.0F, 0.0F, 0.0F);
                 GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
                 GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-                this.renderBlocks.renderBlockOnInventory(var8);
+                if (renderType == 0) 
+                	this.renderBlocks.renderBlockOnInventory(var8);
+                else
+                	ModLoader.renderInvBlock(this.renderBlocks, var8, renderType);
                 GL11.glPopMatrix();
             } else {
                 if (var2.getItem().getIconIndex() >= 0) {
@@ -137,7 +150,13 @@
 
         GL11.glTranslatef(var2, var3 + var8, var4);
         GL11.glEnable(2977 /*GL_NORMALIZE*/);
-        if (var7.itemID < 256 && Block.blocksList[var7.itemID].getRenderType() == 0) {
+        int renderType;
+        if (var7.itemID < 256 && 
+        	(
+        		(renderType = Block.blocksList[var7.itemID].getRenderType()) == 0 ||
+        		ModLoader.renderBlockIsItemFull3D(renderType)
+        	)
+        ) {
             GL11.glRotatef(var6, 0.0F, 1.0F, 0.0F);
             this.loadTexture("/terrain.png");
             var2 = 0.25F;
@@ -155,8 +174,10 @@
                     var6 = (var12.random.nextFloat() * 2.0F - 1.0F) * 0.2F / var2;
                     GL11.glTranslatef(var4, var5, var6);
                 }
-
-                var12.renderBlocks.renderBlockOnInventory(Block.blocksList[var7.itemID]);
+                if (renderType == 0) 
+                	var12.renderBlocks.renderBlockOnInventory(Block.blocksList[var7.itemID]);
+                else
+                	ModLoader.renderInvBlock(var12.renderBlocks, Block.blocksList[var7.itemID], renderType);
                 GL11.glPopMatrix();
             }
         } else {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java MCP-LTS/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java	2021-11-10 11:11:52.217440700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/client/renderer/entity/RenderManager.java	2021-12-01 11:57:44.735634800 +0100
@@ -27,17 +27,21 @@
 import net.minecraft.game.level.World;
 import org.lwjgl.opengl.GL11;
 
+import com.mojontwins.modloader.ModLoader;
+
 public final class RenderManager {
     private Map entityRenderMap = new HashMap();
     public static RenderManager instance = new RenderManager();
     public RenderEngine renderEngine;
     public World worldObj;
     public float playerViewY;
+    public float playerViewX;
     private float viewerPosX;
     private float viewerPosY;
     private float viewerPosZ;
 
-    private RenderManager() {
+    @SuppressWarnings("unchecked")
+	private RenderManager() {
         this.entityRenderMap.put(EntitySpider.class, new RenderSpider());
         this.entityRenderMap.put(EntityPig.class, new RenderLiving(new ModelPig(), 0.7F));
         this.entityRenderMap.put(EntitySheep.class, new RenderSheep(new ModelSheep(), new ModelSheepFur(), 0.7F));
@@ -63,7 +67,11 @@
     public final Render getEntityRenderObject(Entity var1) {
         Class var2 = var1.getClass();
         Render var3;
-        if ((var3 = (Render)this.entityRenderMap.get(var2)) == null && var2 != Entity.class) {
+        var3 = ModLoader.getEntityRender(var2);
+        if (var3 == null) var3 = (Render)this.entityRenderMap.get(var2); else
+        	var3.setRenderManager(this);
+        
+        if (var3 == null && var2 != Entity.class) {
             var3 = (Render)this.entityRenderMap.get(var2.getSuperclass());
             this.entityRenderMap.put(var2, var3);
         }
@@ -75,6 +83,7 @@
         this.worldObj = var1;
         this.renderEngine = var2;
         this.playerViewY = var3.prevRotationYaw + (var3.rotationYaw - var3.prevRotationYaw) * var4;
+        this.playerViewX = var3.prevRotationPitch + (var3.rotationPitch - var3.prevRotationPitch) * var4;
         this.viewerPosX = var3.lastTickPosX + (var3.posX - var3.lastTickPosX) * var4;
         this.viewerPosY = var3.lastTickPosY + (var3.posY - var3.lastTickPosY) * var4;
         this.viewerPosZ = var3.lastTickPosZ + (var3.posZ - var3.lastTickPosZ) * var4;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/Block.java MCP-LTS/src/minecraft/net/minecraft/game/block/Block.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/Block.java	2021-11-10 11:11:52.248689300 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/Block.java	2021-12-20 22:47:11.078802100 +0100
@@ -1,9 +1,13 @@
 package net.minecraft.game.block;
 
 import java.util.Random;
+
+import com.mojontwins.modloader.ModLoader;
+
 import net.minecraft.client.physics.AxisAlignedBB;
 import net.minecraft.client.physics.MovingObjectPosition;
 import net.minecraft.client.renderer.Vec3D;
+import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.other.EntityItem;
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.entity.player.InventoryPlayer;
@@ -13,15 +17,17 @@
 import net.minecraft.game.level.World;
 
 public class Block {
-    private static StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
-    private static StepSound soundWoodFootstep = new StepSound("wood", 1.0F, 1.0F);
-    private static StepSound soundGravelFootstep = new StepSound("gravel", 1.0F, 1.0F);
-    private static StepSound soundGrassFootstep = new StepSound("grass", 1.0F, 1.0F);
-    private static StepSound soundStoneFootstep = new StepSound("stone", 1.0F, 1.0F);
-    private static StepSound soundMetalFootstep = new StepSound("stone", 1.0F, 1.5F);
-    private static StepSound soundGlassFootstep = new StepSoundGlass("stone", 1.0F, 1.0F);
-    private static StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
-    private static StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
+	public String name; 
+	
+    public static StepSound soundPowderFootstep = new StepSound("stone", 1.0F, 1.0F);
+    public static StepSound soundWoodFootstep = new StepSound("wood", 1.0F, 1.0F);
+    public static StepSound soundGravelFootstep = new StepSound("gravel", 1.0F, 1.0F);
+    public static StepSound soundGrassFootstep = new StepSound("grass", 1.0F, 1.0F);
+    public static StepSound soundStoneFootstep = new StepSound("stone", 1.0F, 1.0F);
+    public static StepSound soundMetalFootstep = new StepSound("stone", 1.0F, 1.5F);
+    public static StepSound soundGlassFootstep = new StepSoundGlass("stone", 1.0F, 1.0F);
+    public static StepSound soundClothFootstep = new StepSound("cloth", 1.0F, 1.0F);
+    public static StepSound soundSandFootstep = new StepSoundSand("sand", 1.0F, 1.0F);
     public static final Block[] blocksList = new Block[256];
     public static final boolean[] tickOnLoad = new boolean[256];
     public static final boolean[] opaqueCubeLookup = new boolean[256];
@@ -103,9 +109,10 @@
     public float maxZ;
     public StepSound stepSound;
     public float blockParticleGravity;
-    public final Material material;
+    public Material material;
 
     protected Block(int var1, Material var2) {
+    	this.name = "block." + this.getClass().getSimpleName() + "_" + var1;
         this.stepSound = soundPowderFootstep;
         this.blockParticleGravity = 1.0F;
         if (blocksList[var1] != null) {
@@ -207,6 +214,10 @@
     public boolean isCollidable() {
         return true;
     }
+    
+    public boolean canCollideCheck (int metadata, boolean flag) {
+    	return isCollidable ();
+    }
 
     public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
     }
@@ -244,11 +255,13 @@
         } else if (!var1.canHarvestBlock(this)) {
             return 1.0F / this.hardness / 100.0F;
         } else {
-            InventoryPlayer var2 = (var1 = var1).inventory;
+            InventoryPlayer var2 = var1.inventory;
             float var4 = 1.0F;
             if (var2.mainInventory[var2.currentItem] != null) {
                 var4 = 1.0F * var2.mainInventory[var2.currentItem].getItem().getStrVsBlock(this);
             }
+            
+            var4 = ModLoader.hookBlockHitStrengthModifier (var1, this, var4);
 
             float var5 = var4;
             if (var1.isInsideOfMaterial()) {
@@ -419,10 +432,17 @@
 
     public void onEntityWalking(World var1, int var2, int var3, int var4) {
     }
+    
+    // ModLoader
+    public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
+    }
 
     public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
     }
 
+    public void onBlockPlacedBy(World var1, int var2, int var3, int var4, Entity entity) {
+    }    
+    
     static {
         Block var10000 = (new BlockStone(1, 1)).setHardness(1.5F).setResistance(10.0F);
         StepSound var1 = soundStoneFootstep;
@@ -459,10 +479,10 @@
         var0 = var10000;
         var10000.stepSound = var1;
         bedrock = var0;
-        waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
-        waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3);
-        lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255);
-        lavaStill = (new BlockStationary(11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
+        waterMoving = (new BlockFlowing(8, 9, Material.water)).setHardness(100.0F).setLightOpacity(3);
+        waterStill = (new BlockStationary(8, 9, Material.water)).setHardness(100.0F).setLightOpacity(3);
+        lavaMoving = (new BlockFlowing(10, 11, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255);
+        lavaStill = (new BlockStationary(10, 11, Material.lava)).setHardness(100.0F).setLightValue(1.0F).setLightOpacity(255);
         var10000 = (new BlockSand(12, 18)).setHardness(0.5F);
         var1 = soundSandFootstep;
         var0 = var10000;
@@ -726,4 +746,9 @@
         }
 
     }
+    
+    public Block setName(String name) {
+    	this.name = name;
+    	return this;
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFlowing.java MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFlowing.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFlowing.java	2021-11-10 11:11:52.342439900 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFlowing.java	2021-11-30 16:34:23.824190900 +0100
@@ -4,14 +4,14 @@
 import net.minecraft.client.physics.AxisAlignedBB;
 import net.minecraft.game.level.World;
 
-public final class BlockFlowing extends BlockFluid {
+public class BlockFlowing extends BlockFluid {
     private int stillId1;
     private int movingId1;
     private Random rand = new Random();
     private int[] liquidIntArray = new int[]{0, 1, 2, 3};
 
-    protected BlockFlowing(int var1, Material var2) {
-        super(var1, var2);
+    protected BlockFlowing(int var1, int varStill, Material var2) {
+        super(var1, varStill, var2);
         this.blockIndexInTexture = 14;
         if (var2 == Material.lava) {
             this.blockIndexInTexture = 30;
@@ -193,7 +193,7 @@
     public final void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
     }
 
-    public final int tickRate() {
+    public int tickRate() {
         return this.material == Material.lava ? 25 : 5;
     }
 
@@ -201,7 +201,7 @@
         return 0;
     }
 
-    public final int getRenderBlockPass() {
+    public int getRenderBlockPass() {
         return this.material == Material.water ? 1 : 0;
     }
 
@@ -209,11 +209,15 @@
         if (var0.getBlockId(var1, var2, var3) == Block.fire.blockID) {
             var0.setBlockWithNotify(var1, var2, var3, 0);
             return true;
-        } else if (var0.getBlockId(var1, var2, var3) != Block.lavaMoving.blockID && var0.getBlockId(var1, var2, var3) != Block.lavaStill.blockID) {
-            return false;
+        /*} else if (var0.getBlockId(var1, var2, var3) != Block.lavaMoving.blockID && var0.getBlockId(var1, var2, var3) != Block.lavaStill.blockID) {*/
         } else {
-            var0.setBlockWithNotify(var1, var2, var3, Block.stone.blockID);
-            return true;
+        	int blockID = var0.getBlockId(var1, var2, var3);
+        	if (blockID > 0 && Block.blocksList[blockID].material != Material.lava) { 
+        		return false;
+	        } else {
+	            var0.setBlockWithNotify(var1, var2, var3, Block.stone.blockID);
+	            return true;
+	        }
         }
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFluid.java MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFluid.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFluid.java	2021-11-10 11:11:52.358065100 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFluid.java	2021-11-30 16:24:46.345176400 +0100
@@ -8,7 +8,7 @@
     protected int stillId;
     protected int movingId;
 
-    protected BlockFluid(int var1, Material var2) {
+    protected BlockFluid(int var1, int varStill, Material var2) {
         super(var1, var2);
         this.blockIndexInTexture = 14;
         if (var2 == Material.lava) {
@@ -17,13 +17,13 @@
 
         Block.isBlockFluid[var1] = true;
         this.movingId = var1;
-        this.stillId = var1 + 1;
+        this.stillId = varStill;
         this.setBlockBounds(0.01F, -0.09F, 0.01F, 1.01F, 0.90999997F, 1.01F);
         this.setTickOnLoad(true);
         this.setResistance(2.0F);
     }
 
-    public final int getBlockTextureFromSide(int var1) {
+    public int getBlockTextureFromSide(int var1) {
         if (this.material == Material.lava) {
             return this.blockIndexInTexture;
         } else if (var1 == 1) {
@@ -119,14 +119,20 @@
         }
     }
 
-    public final float getBlockBrightness(World var1, int var2, int var3, int var4) {
+    public float getBlockBrightness(World var1, int var2, int var3, int var4) {
         return this.material == Material.lava ? 100.0F : var1.getLightBrightness(var2, var3, var4);
     }
 
     public boolean shouldSideBeRendered(World var1, int var2, int var3, int var4, int var5) {
         if (var2 >= 0 && var3 >= 0 && var4 >= 0 && var2 < var1.width && var4 < var1.length) {
-            int var6;
-            if ((var6 = var1.getBlockId(var2, var3, var4)) != this.movingId && var6 != this.stillId) {
+            int var6 = var1.getBlockId(var2, var3, var4);
+            if (var6 != this.movingId && var6 != this.stillId) {
+            	
+            	// ADDED
+            	if (var6 != 0) {
+            		if (Block.blocksList[var6].material == Material.water) return false;
+            	}
+            	
                 return var5 == 1 && (var1.getBlockId(var2 - 1, var3, var4) == 0 || var1.getBlockId(var2 + 1, var3, var4) == 0 || var1.getBlockId(var2, var3, var4 - 1) == 0 || var1.getBlockId(var2, var3, var4 + 1) == 0) ? true : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
             } else {
                 return false;
@@ -139,6 +145,10 @@
     public boolean isCollidable() {
         return false;
     }
+    
+    public boolean canCollideCheck (int metadata, boolean flag) {
+    	return flag && metadata == 0;
+    }
 
     public AxisAlignedBB getCollisionBoundingBoxFromPool(int var1, int var2, int var3) {
         return null;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFluidSource.java MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFluidSource.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFluidSource.java	2021-11-10 11:11:52.373689500 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFluidSource.java	2021-11-30 09:57:27.443859000 +0100
@@ -6,7 +6,7 @@
 public final class BlockFluidSource extends Block {
     private int fluid;
 
-    protected BlockFluidSource(int var1, int var2) {
+    public BlockFluidSource(int var1, int var2) {
         super(var1, Block.blocksList[var2].blockIndexInTexture, Material.water);
         this.fluid = var2;
         this.setTickOnLoad(true);
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFurnace.java MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFurnace.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockFurnace.java	2021-11-10 11:11:52.373689500 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/BlockFurnace.java	2021-12-05 10:15:31.408534600 +0100
@@ -1,10 +1,13 @@
 package net.minecraft.game.block;
 
 import java.util.Random;
+
 import net.minecraft.game.block.tileentity.TileEntity;
 import net.minecraft.game.block.tileentity.TileEntityFurnace;
+import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
+import util.MathHelper;
 
 public final class BlockFurnace extends BlockContainer {
     private final boolean isActive;
@@ -110,4 +113,25 @@
     protected final TileEntity getBlockEntity() {
         return new TileEntityFurnace();
     }
+    
+    public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, Entity par5EntityLiving) {
+        int i = MathHelper.floor_double((double)((par5EntityLiving.rotationYaw * 4F) / 360F) + 0.5D) & 3;
+
+        if (i == 0) {
+            par1World.setBlockMetadata(par2, par3, par4, 2);
+        } 
+
+        if (i == 1) {
+            par1World.setBlockMetadata(par2, par3, par4, 5);
+        }
+
+        if (i == 2) {
+            par1World.setBlockMetadata(par2, par3, par4, 3);
+        }
+
+        if (i == 3) {
+            par1World.setBlockMetadata(par2, par3, par4, 4);
+        }
+    }
+
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockStationary.java MCP-LTS/src/minecraft/net/minecraft/game/block/BlockStationary.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/BlockStationary.java	2021-11-10 11:11:52.451814400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/BlockStationary.java	2021-11-30 09:57:17.008699900 +0100
@@ -4,9 +4,9 @@
 import net.minecraft.game.level.World;
 
 public final class BlockStationary extends BlockFluid {
-    protected BlockStationary(int var1, Material var2) {
-        super(var1, var2);
-        this.movingId = var1 - 1;
+    public BlockStationary(int fluidID, int var1, Material var2) {
+        super(var1, 0, var2);
+        this.movingId = fluidID;
         this.stillId = var1;
         this.setTickOnLoad(false);
     }
@@ -37,7 +37,7 @@
         }
 
         if (var5 != 0) {
-            Material var7 = Block.blocksList[var5].material;
+        	Material var7 = Block.blocksList[var5].material;
             if (this.material == Material.water && var7 == Material.lava || var7 == Material.water && this.material == Material.lava) {
                 var1.setBlockWithNotify(var2, var3, var4, Block.stone.blockID);
                 return;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/tileentity/TileEntity.java MCP-LTS/src/minecraft/net/minecraft/game/block/tileentity/TileEntity.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/tileentity/TileEntity.java	2021-11-10 11:11:52.498703100 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/tileentity/TileEntity.java	2021-11-18 23:22:46.973733000 +0100
@@ -17,4 +17,8 @@
 
     public void updateEntity() {
     }
+    
+    // Added my ModLoader
+    public void onTileEntityRemoved(World world, int x, int y, int z) {
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/tileentity/TileEntityFurnace.java MCP-LTS/src/minecraft/net/minecraft/game/block/tileentity/TileEntityFurnace.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/block/tileentity/TileEntityFurnace.java	2021-11-10 11:11:52.514314200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/block/tileentity/TileEntityFurnace.java	2021-12-25 22:56:09.911562500 +0100
@@ -2,6 +2,8 @@
 
 import com.mojang.nbt.NBTTagCompound;
 import com.mojang.nbt.NBTTagList;
+import com.mojontwins.modloader.ModFurnaceRecipes;
+
 import net.minecraft.client.inventory.IInventory;
 import net.minecraft.game.block.Block;
 import net.minecraft.game.block.Material;
@@ -188,6 +190,8 @@
     }
 
     private static int smeltItem(int var0) {
+    	int result = ModFurnaceRecipes.smeltItem (var0); if (result != -1) return result;
+    	
         if (var0 == Block.oreIron.blockID) {
             return Item.ingotIron.shiftedIndex;
         } else if (var0 == Block.oreGold.blockID) {
@@ -213,7 +217,7 @@
             } else if (var1 == Item.stick.shiftedIndex) {
                 return 100;
             } else {
-                return var1 == Item.coal.shiftedIndex ? 1600 : 0;
+                return var1 == Item.coal.shiftedIndex ? 1600 : ModLoader.getItemBurnTime(var1);
             }
         }
     }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/Entity.java MCP-LTS/src/minecraft/net/minecraft/game/entity/Entity.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/Entity.java	2021-11-10 11:11:52.514314200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/Entity.java	2021-12-20 22:59:38.272751600 +0100
@@ -3,6 +3,8 @@
 import com.mojang.nbt.NBTTagCompound;
 import com.mojang.nbt.NBTTagFloat;
 import com.mojang.nbt.NBTTagList;
+import com.mojontwins.modloader.ModLoader;
+
 import java.util.ArrayList;
 import java.util.Random;
 import net.minecraft.client.physics.AxisAlignedBB;
@@ -47,10 +49,9 @@
     public float lastTickPosX;
     public float lastTickPosY;
     public float lastTickPosZ;
-    private float ySize = 0.0F;
+    public float ySize = 0.0F;
     public float stepHeight = 0.0F;
     public boolean noClip = false;
-    private float entityCollisionReduction = 0.0F;
     protected Random rand = new Random();
     public int ticksExisted = 0;
     public int fireResistance = 1;
@@ -152,7 +153,8 @@
             --this.fire;
         }
 
-        if (this.handleLavaMovement()) {
+        if (ModLoader.handleEntityVsFluidCollision (this, this.worldObj)) {        	
+        } else if (this.handleLavaMovement()) {
             this.attackEntityFrom((Entity)null, 10);
             this.fire = 600;
         }
@@ -207,7 +209,33 @@
             float var7 = var2;
             float var8 = var3;
             AxisAlignedBB var9 = this.boundingBox.copy();
-            ArrayList var10 = this.worldObj.getCollidingBoundingBoxes(this.boundingBox.addCoord(var1, var2, var3));
+            
+            // Added from the future: Sneaking
+            boolean sneaking = this.onGround && this.isSneaking();
+            if (sneaking) {
+                double fvar19;
+                for(fvar19 = 0.05D; var1 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this.boundingBox.getOffsetBoundingBox(var1, -1.0F, 0.0F)).size() == 0; var6 = var1) {
+                    if (var1 < fvar19 && var1 >= -fvar19) {
+                        var1 = 0.0F;
+                    } else if (var1 > 0.0D) {
+                        var1 -= fvar19;
+                    } else {
+                        var1 += fvar19;
+                    }
+                }
+
+                for(; var3 != 0.0D && this.worldObj.getCollidingBoundingBoxes(this.boundingBox.getOffsetBoundingBox(0.0F, -1.0F, var3)).size() == 0; var8 = var3) {
+                    if (var3 < fvar19 && var3 >= -fvar19) {
+                        var3 = 0.0F;
+                    } else if (var3 > 0.0D) {
+                        var3 -= fvar19;
+                    } else {
+                        var3 += fvar19;
+                    }
+                }
+            }            
+            
+            ArrayList<AxisAlignedBB> var10 = this.worldObj.getCollidingBoundingBoxes(this.boundingBox.addCoord(var1, var2, var3));
 
             for(int var11 = 0; var11 < var10.size(); ++var11) {
                 var2 = ((AxisAlignedBB)var10.get(var11)).calculateYOffset(this.boundingBox, var2);
@@ -331,7 +359,7 @@
             var20 = this.posX - var4;
             var19 = this.posZ - var5;
             this.distanceWalkedModified = (float)((double)this.distanceWalkedModified + (double)MathHelper.sqrt_float(var20 * var20 + var19 * var19) * 0.6D);
-            if (this.canTriggerWalking) {
+            if (this.canTriggerWalking && !sneaking) {
                 int var21 = (int)this.posX;
                 int var23 = (int)(this.posY - 0.2F - this.yOffset);
                 var17 = (int)this.posZ;
@@ -346,6 +374,25 @@
                     Block.blocksList[var16].onEntityWalking(this.worldObj, var21, var23, var17);
                 }
             }
+            
+            // ModLoader
+            int bbMinX = MathHelper.floor_double(this.boundingBox.minX);
+            int bbMinY = MathHelper.floor_double(this.boundingBox.minY);
+            int bbMinZ = MathHelper.floor_double(this.boundingBox.minZ);
+            int bbMaxX = MathHelper.floor_double(this.boundingBox.maxX);
+            int bbMaxY = MathHelper.floor_double(this.boundingBox.maxY);
+            int bbMaxZ = MathHelper.floor_double(this.boundingBox.maxZ);
+
+            for(int x = bbMinX; x <= bbMaxX; ++x) {
+                for(int y = bbMinY; y <= bbMaxY; ++y) {
+                    for(int z = bbMinZ; z <= bbMaxZ; ++z) {
+                        int blockID = this.worldObj.getBlockId(x, y, z);
+                        if (blockID > 0) {
+                            Block.blocksList[blockID].onEntityCollidedWithBlock(this.worldObj, x, y, z, this);
+                        }
+                    }
+                }
+            }
 
             this.ySize *= 0.4F;
             boolean var22 = this.handleWaterMovement();
@@ -368,6 +415,10 @@
 
         }
     }
+    
+    public boolean isSneaking() {
+        return false;
+    }
 
     protected void dealFireDamage(int var1) {
         this.attackEntityFrom((Entity)null, 1);
@@ -464,7 +515,7 @@
 
     private void addVelocity(float var1, float var2, float var3) {
         this.motionX += var1;
-        this.motionY = this.motionY;
+        // this.motionY = this.motionY;
         this.motionZ += var3;
     }
 
@@ -517,7 +568,7 @@
         this.readEntityFromNBT(var1);
     }
 
-    protected abstract String getEntityString();
+    public abstract String getEntityString();
 
     protected abstract void readEntityFromNBT(NBTTagCompound var1);
 
@@ -525,7 +576,7 @@
 
     private static NBTTagList newDoubleNBTList(float... var0) {
         NBTTagList var1 = new NBTTagList();
-        int var2 = (var0 = var0).length;
+        int var2 = var0.length;
 
         for(int var3 = 0; var3 < var2; ++var3) {
             float var4 = var0[var3];
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/EntityLiving.java MCP-LTS/src/minecraft/net/minecraft/game/entity/EntityLiving.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/EntityLiving.java	2021-11-10 11:11:52.545578000 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/EntityLiving.java	2021-12-20 16:12:05.431244800 +0100
@@ -1,7 +1,16 @@
 package net.minecraft.game.entity;
 
 import com.mojang.nbt.NBTTagCompound;
+import com.mojontwins.modloader.ModLoader;
+import com.mojontwins.modloader.entity.status.Status;
+import com.mojontwins.modloader.entity.status.StatusEffect;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
+
+import net.minecraft.client.renderer.Vec3D;
 import net.minecraft.game.block.Block;
 import net.minecraft.game.block.StepSound;
 import net.minecraft.game.level.World;
@@ -35,6 +44,9 @@
     protected boolean isJumping;
     private float defaultPitch;
     protected float moveSpeed;
+    
+    // Added by ModLoader: status effects
+    protected HashMap<Integer,StatusEffect> activeStatusEffectsMap;
 
     public EntityLiving(World var1) {
         super(var1);
@@ -50,6 +62,9 @@
         Math.random();
         this.rotationYaw = (float)(Math.random() * 3.1415927410125732D * 2.0D);
         this.stepHeight = 0.5F;
+        
+        // Added by Modloader: status effects
+        activeStatusEffectsMap = new HashMap<Integer,StatusEffect>();
     }
 
     public final String getTexture() {
@@ -199,6 +214,10 @@
         }
 
         this.prevRotationYawHead += var5;
+        
+        
+        // Added by ModLoader: status effects
+        this.updateStatusEffects ();
     }
 
     protected final void setSize(float var1, float var2) {
@@ -291,11 +310,18 @@
             }
         }
 
+        if ((var4 = this.scoreForSure()) > 0) {
+        	this.dropItemWithOffset(var4, 1);
+        }
     }
 
     protected int scoreValue() {
         return 0;
     }
+    
+    protected int scoreForSure() {
+        return 0;
+    }
 
     protected final void fall(float var1) {
         int var3;
@@ -314,6 +340,20 @@
         var1.setShort("HurtTime", (short)this.hurtTime);
         var1.setShort("DeathTime", (short)this.deathTime);
         var1.setShort("AttackTime", (short)this.attackTime);
+        
+        // Added by ModLoader: status effects
+        var1.setShort("statusEffects", (short)this.activeStatusEffectsMap.size());
+        
+        Iterator<Integer> it = activeStatusEffectsMap.keySet().iterator ();
+        int counter = 0;
+    	while (it.hasNext()) {
+    		Integer statusID = it.next();
+    		StatusEffect statusEffect = (StatusEffect) activeStatusEffectsMap.get(statusID);
+    		var1.setShort("statusEffect_" + counter + "_statusID", (short)statusEffect.statusID);
+    		var1.setShort("statusEffect_" + counter + "_duration", (short)statusEffect.duration);
+    		var1.setShort("statusEffect_" + counter + "_amplifier", (short)statusEffect.amplifier);
+    		counter ++;
+    	}
     }
 
     protected void readEntityFromNBT(NBTTagCompound var1) {
@@ -325,9 +365,20 @@
         this.hurtTime = var1.getShort("HurtTime");
         this.deathTime = var1.getShort("DeathTime");
         this.attackTime = var1.getShort("AttackTime");
+        
+        // Added by ModLoader: status effects
+        this.activeStatusEffectsMap.clear();
+        int counter = var1.getShort("statusEffects");
+        for (int i = 0; i < counter; i ++) {
+        	int statusID = (int)var1.getShort("statusEffect_" + i + "_statusID");
+        	int duration = (int)var1.getShort("statusEffect_" + i + "_duration");
+        	int amplifier = (int)var1.getShort("statusEffect_" + i + "_amplifier");
+        	StatusEffect statusEffect = new StatusEffect(statusID, duration, amplifier);
+        	activeStatusEffectsMap.put(Integer.valueOf(statusID), statusEffect);
+        }
     }
 
-    protected String getEntityString() {
+    public String getEntityString() {
         return "Mob";
     }
 
@@ -375,8 +426,9 @@
         this.moveStrafing *= 0.98F;
         this.moveForward *= 0.98F;
         this.randomYawVelocity *= 0.9F;
-        var3 = this.moveForward;
-        var2 = this.moveStrafing;
+        float f = ModLoader.hookEntitySpeedModifier (this);
+        var3 = this.moveForward * f;
+        var2 = this.moveStrafing * f;
         float var4;
         if (this.handleWaterMovement()) {
             var4 = this.posY;
@@ -459,4 +511,123 @@
         this.setPosition(var1, var2 + this.height / 2.0F, var3);
         return this.worldObj.checkIfAABBIsClear1(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this.boundingBox).size() == 0 && !this.worldObj.getIsAnyLiquid(this.boundingBox);
     }
+    
+    // Added by ModLoader: status effects
+    public void updateStatusEffects () {
+    	if (activeStatusEffectsMap.size() == 0) return; 
+    	
+    	Iterator<Integer> it = activeStatusEffectsMap.keySet().iterator ();
+    	
+    	// This will help me select one effect at random:
+    	int randomEffectCounter = 0;
+    	int randomEffectSelected = this.rand.nextInt(activeStatusEffectsMap.size());    	
+    	
+    	while (it.hasNext()) {
+    		Integer statusID = it.next();
+    		StatusEffect statusEffect = (StatusEffect) activeStatusEffectsMap.get(statusID);
+    		
+    		// Create a particle? Not perfect but greedy solution which mostly works
+    		if (randomEffectCounter == randomEffectSelected) {
+    			Status status = Status.statusTypes[statusEffect.statusID];
+    			if (status.showParticles) {
+    				int particleColour = status.particleColor;
+
+    				worldObj.spawnParticle(
+    						"status_effect",
+    						posX + (this.rand.nextFloat() - 0.5F) * (float) width, 
+    	                    (posY + this.rand.nextFloat() * (float) height) - (float) yOffset, 
+    	                    posZ + (this.rand.nextFloat() - 0.5F) * (float) width,
+    	                    (float)(particleColour >> 16 & 0xff) / 255F,
+    	                    (float)(particleColour >> 8 & 0xff) / 255F,
+    	                    (float)(particleColour & 0xff) / 255F
+    	                   );
+    			}
+    		}
+    		randomEffectCounter ++;
+    		
+    		// Status effect will return false when duration has run out
+    		if (!statusEffect.onUpdate(this)) {
+    			it.remove ();
+    		}
+    	}
+    }
+    
+    public void removeStatusEffect (int id) {
+    	if (activeStatusEffectsMap.containsKey(id)) {
+    		activeStatusEffectsMap.remove(id);
+    	}
+    }
+    
+    public void clearActiveStatusEffects() {
+    	Iterator<Integer> it = activeStatusEffectsMap.keySet().iterator ();
+    	
+    	while (it.hasNext()) {
+    		it.next();
+     		it.remove ();
+    	}
+    }
+    
+    public Collection<StatusEffect> getActiveStatusEffects() {
+        return activeStatusEffectsMap.values();
+    }    
+    
+    public boolean isStatusActive(Status status) {
+        return activeStatusEffectsMap.containsKey(Integer.valueOf(status.id));
+    }  
+    
+    public StatusEffect getActiveStatusEffect(Status status) {
+        return (StatusEffect)activeStatusEffectsMap.get(Integer.valueOf(status.id));
+    }    
+    
+    public void addStatusEffect (StatusEffect statusEffect) {
+    	if (Status.statusTypes[statusEffect.statusID].isApplicableTo(this)) {
+    		if (activeStatusEffectsMap.containsKey(Integer.valueOf(statusEffect.statusID))) {
+    			((StatusEffect)activeStatusEffectsMap.get(Integer.valueOf(statusEffect.statusID))).combine(statusEffect);
+    		} else {
+	    		activeStatusEffectsMap.put(Integer.valueOf(statusEffect.statusID), statusEffect);
+    		}
+    	}
+    }
+    
+    protected boolean canEntityBeSeen(Entity var1) {
+        return this.worldObj.rayTraceBlocks(new Vec3D(this.posX, this.posY + (float)this.getEyeHeight(), this.posZ), new Vec3D(var1.posX, var1.posY + (float)var1.getEyeHeight(), var1.posZ)) == null;
+    }
+    
+    public void faceEntity(Entity var1, float var2) {
+        float var3 = var1.posX - this.posX;
+        float var7 = var1.posZ - this.posZ;
+        float var5;
+        if (var1 instanceof EntityLiving) {
+            EntityLiving var9 = (EntityLiving)var1;
+            var5 = var9.posY + (float)var9.getEyeHeight() - (this.posY + (float)this.getEyeHeight());
+        } else {
+            var5 = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0F - (this.posY + (float)this.getEyeHeight());
+        }
+
+        float var13 = (float)MathHelper.sqrt_float(var3 * var3 + var7 * var7);
+        float var11 = (float)(Math.atan2(var7, var3) * 180.0D / 3.1415927410125732D) - 90.0F;
+        float var12 = (float)(Math.atan2(var5, var13) * 180.0D / 3.1415927410125732D);
+        this.rotationPitch = this.updateRotation(this.rotationPitch, var12, var2);
+        this.rotationYaw = this.updateRotation(this.rotationYaw, var11, var2);
+    }
+    
+    private float updateRotation(float var1, float var2, float var3) {
+        float var4;
+        for(var4 = var2 - var1; var4 < -180.0F; var4 += 360.0F) {
+        }
+
+        while(var4 >= 180.0F) {
+            var4 -= 360.0F;
+        }
+
+        if (var4 > var3) {
+            var4 = var3;
+        }
+
+        if (var4 < -var3) {
+            var4 = -var3;
+        }
+
+        return var1 + var4;
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/EntityPainting.java MCP-LTS/src/minecraft/net/minecraft/game/entity/EntityPainting.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/EntityPainting.java	2021-11-10 11:11:52.545578000 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/EntityPainting.java	2021-12-20 16:12:11.109236000 +0100
@@ -210,7 +210,7 @@
         var1.setInteger("TileZ", this.zPosition);
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Painting";
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/animal/EntityPig.java MCP-LTS/src/minecraft/net/minecraft/game/entity/animal/EntityPig.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/animal/EntityPig.java	2021-11-10 11:11:52.592452400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/animal/EntityPig.java	2021-12-20 16:13:17.006697500 +0100
@@ -19,7 +19,7 @@
         super.readEntityFromNBT(var1);
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Pig";
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/animal/EntitySheep.java MCP-LTS/src/minecraft/net/minecraft/game/entity/animal/EntitySheep.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/animal/EntitySheep.java	2021-11-10 11:11:52.592452400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/animal/EntitySheep.java	2021-12-20 16:13:17.006697500 +0100
@@ -43,7 +43,7 @@
         this.sheared = var1.getBoolean("Sheared");
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Sheep";
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityCreeper.java MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityCreeper.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityCreeper.java	2021-11-10 11:11:52.592452400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityCreeper.java	2021-12-20 16:13:17.022305700 +0100
@@ -24,7 +24,7 @@
         super.readEntityFromNBT(var1);
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Creeper";
     }
 
@@ -70,4 +70,12 @@
     protected final int scoreValue() {
         return Item.gunpowder.shiftedIndex;
     }
+
+    protected String getHurtSound() {
+        return "mob.creeper2";
+    }
+
+    protected String getDeathSound() {
+        return "mob.creeperdeath";
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityGiantZombie.java MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityGiantZombie.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityGiantZombie.java	2021-11-10 11:11:52.592452400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityGiantZombie.java	2021-12-20 16:13:17.022305700 +0100
@@ -17,7 +17,7 @@
         return this.worldObj.getLightBrightness(var1, var2, var3) - 0.5F;
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Giant";
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityMob.java MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityMob.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityMob.java	2021-11-10 11:11:52.592452400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityMob.java	2021-12-20 16:13:48.525191300 +0100
@@ -65,11 +65,11 @@
         super.readEntityFromNBT(var1);
     }
 
-    protected String getEntityString() {
+    public String getEntityString() {
         return "Monster";
     }
 
-    public final boolean getCanSpawnHere(float var1, float var2, float var3) {
+    public boolean getCanSpawnHere(float var1, float var2, float var3) {
         return this.worldObj.getBlockLightValue((int)var1, (int)var2, (int)var3) <= this.rand.nextInt(8) && super.getCanSpawnHere(var1, var2, var3);
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntitySkeleton.java MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntitySkeleton.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntitySkeleton.java	2021-11-10 11:11:52.592452400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntitySkeleton.java	2021-12-20 16:13:48.533626900 +0100
@@ -22,7 +22,7 @@
         super.onLivingUpdate();
     }
 
-    protected final void attackEntity(Entity var1, float var2) {
+    protected void attackEntity(Entity var1, float var2) {
         if (var2 < 10.0F) {
             var2 = var1.posX - this.posX;
             float var3 = var1.posZ - this.posZ;
@@ -34,7 +34,7 @@
                 this.worldObj.playSoundAtEntity(this, "random.bow", 1.0F, 1.0F / (this.rand.nextFloat() * 0.4F + 0.8F));
                 this.worldObj.spawnEntityInWorld(var4);
                 var4.setArrowHeading(var2, var6 + var5, var3, 0.6F, 12.0F);
-                this.attackTime = 30;
+                this.attackTime = 50;
             }
 
             this.rotationYaw = (float)(Math.atan2((double)var3, (double)var2) * 180.0D / 3.1415927410125732D) - 90.0F;
@@ -51,11 +51,23 @@
         super.readEntityFromNBT(var1);
     }
 
-    protected final String getEntityString() {
+    public String getEntityString() {
         return "Skeleton";
     }
 
-    protected final int scoreValue() {
+    protected int scoreValue() {
         return Item.arrow.shiftedIndex;
     }
+    
+    protected String getLivingSound() {
+        return "mob.skeleton";
+    }
+
+    protected String getHurtSound() {
+        return "mob.skeletonhurt";
+    }
+
+    protected String getDeathSound() {
+        return "mob.skeletondeath";
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntitySpider.java MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntitySpider.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntitySpider.java	2021-11-10 11:11:52.608063700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntitySpider.java	2021-12-20 16:13:17.037929900 +0100
@@ -47,11 +47,23 @@
         super.readEntityFromNBT(var1);
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Spider";
     }
 
     protected final int scoreValue() {
         return Item.silk.shiftedIndex;
     }
+    
+    protected String getLivingSound() {
+        return "mob.spider";
+    }
+
+    protected String getHurtSound() {
+        return "mob.spider";
+    }
+
+    protected String getDeathSound() {
+        return "mob.spiderdeath";
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityZombie.java MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityZombie.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/monster/EntityZombie.java	2021-11-10 11:11:52.608063700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/monster/EntityZombie.java	2021-12-20 16:13:17.037929900 +0100
@@ -20,11 +20,23 @@
         super.onLivingUpdate();
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Zombie";
     }
 
     protected final int scoreValue() {
         return Item.feather.shiftedIndex;
     }
+    
+    protected String getLivingSound() {
+        return "mob.zombie";
+    }
+
+    protected String getHurtSound() {
+        return "mob.zombiehurt";
+    }
+
+    protected String getDeathSound() {
+        return "mob.zombiedeath";
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/other/EntityArrow.java MCP-LTS/src/minecraft/net/minecraft/game/entity/other/EntityArrow.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/other/EntityArrow.java	2021-11-10 11:11:52.623702500 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/other/EntityArrow.java	2021-12-20 23:01:16.764203100 +0100
@@ -95,7 +95,7 @@
         }
 
         Entity var4 = null;
-        List var5 = this.worldObj.entityMap.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0F, 1.0F, 1.0F));
+        List<Entity> var5 = this.worldObj.entityMap.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0F, 1.0F, 1.0F));
         float var6 = 0.0F;
 
         for(int var7 = 0; var7 < var5.size(); ++var7) {
@@ -201,7 +201,7 @@
         this.inGround = var1.getByte("inGround") == 1;
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Arrow";
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/other/EntityItem.java MCP-LTS/src/minecraft/net/minecraft/game/entity/other/EntityItem.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/other/EntityItem.java	2021-11-10 11:11:52.639327900 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/other/EntityItem.java	2021-12-20 23:01:29.875385500 +0100
@@ -10,7 +10,6 @@
 
 public class EntityItem extends Entity {
     public ItemStack item;
-    private int unknownEntityItemInt;
     public int age = 0;
     public int delayBeforeCanPickup;
     private int health = 5;
@@ -123,7 +122,6 @@
             }
         }
 
-        boolean var10000 = false;
         this.moveEntity(this.motionX, this.motionY, this.motionZ);
         this.motionX *= 0.98F;
         this.motionY *= 0.98F;
@@ -134,7 +132,6 @@
             this.motionY *= -0.5F;
         }
 
-        ++this.unknownEntityItemInt;
         ++this.age;
         if (this.age >= 6000) {
             this.setEntityDead();
@@ -168,7 +165,7 @@
         this.item = new ItemStack(var1);
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "Item";
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/other/EntityTNT.java MCP-LTS/src/minecraft/net/minecraft/game/entity/other/EntityTNT.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/other/EntityTNT.java	2021-11-10 11:11:52.639327900 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/other/EntityTNT.java	2021-12-20 16:12:15.875898600 +0100
@@ -60,7 +60,7 @@
         this.fuse = var1.getByte("Fuse");
     }
 
-    protected final String getEntityString() {
+    public final String getEntityString() {
         return "PrimedTnt";
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/player/EntityPlayer.java MCP-LTS/src/minecraft/net/minecraft/game/entity/player/EntityPlayer.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/entity/player/EntityPlayer.java	2021-11-10 11:11:52.639327900 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/entity/player/EntityPlayer.java	2021-12-20 16:13:48.539623700 +0100
@@ -149,7 +149,7 @@
         super.writeEntityToNBT(var1);
     }
 
-    protected String getEntityString() {
+    public String getEntityString() {
         return null;
     }
 
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/Item.java MCP-LTS/src/minecraft/net/minecraft/game/item/Item.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/Item.java	2021-11-10 11:11:52.654952100 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/Item.java	2021-12-05 09:41:12.549193500 +0100
@@ -1,11 +1,17 @@
 package net.minecraft.game.item;
 
 import java.util.Random;
+
+import net.minecraft.client.physics.MovingObjectPosition;
+import net.minecraft.client.renderer.Vec3D;
 import net.minecraft.game.block.Block;
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
+import util.MathHelper;
 
 public class Item {
+	public String name;
+	
     protected static Random rand = new Random();
     public static Item[] itemsList = new Item[1024];
     public static Item shovel;
@@ -96,7 +102,7 @@
         return this.iconIndex;
     }
 
-    public boolean onItemUse(ItemStack var1, World var2, int var3, int var4, int var5, int var6) {
+    public boolean onItemUse(ItemStack var1, EntityPlayer entityPlayer, World var2, int var3, int var4, int var5, int var6) {
         return false;
     }
 
@@ -130,6 +136,28 @@
         return false;
     }
 
+    // Backported from r1.2.5
+    protected MovingObjectPosition getMovingObjectPositionFromPlayer(World par1World, EntityPlayer par2EntityPlayer, boolean par3) {
+        float f = 1.0F;
+        float f1 = par2EntityPlayer.prevRotationPitch + (par2EntityPlayer.rotationPitch - par2EntityPlayer.prevRotationPitch) * f;
+        float f2 = par2EntityPlayer.prevRotationYaw + (par2EntityPlayer.rotationYaw - par2EntityPlayer.prevRotationYaw) * f;
+        float d = par2EntityPlayer.prevPosX + (par2EntityPlayer.posX - par2EntityPlayer.prevPosX) * (float)f;
+        float d1 = (par2EntityPlayer.prevPosY + (par2EntityPlayer.posY - par2EntityPlayer.prevPosY) * (float)f + 1.6200000000000001F) - (float)par2EntityPlayer.yOffset;
+        float d2 = par2EntityPlayer.prevPosZ + (par2EntityPlayer.posZ - par2EntityPlayer.prevPosZ) * (float)f;
+        Vec3D vec3d = new Vec3D (d, d1, d2);
+        float f3 = MathHelper.cos(-f2 * 0.01745329F - (float)Math.PI);
+        float f4 = MathHelper.sin(-f2 * 0.01745329F - (float)Math.PI);
+        float f5 = -MathHelper.cos(-f1 * 0.01745329F);
+        float f6 = MathHelper.sin(-f1 * 0.01745329F);
+        float f7 = f4 * f5;
+        float f8 = f6;
+        float f9 = f3 * f5;
+        float d3 = 5F;
+        Vec3D vec3d1 = vec3d.addVector(f7 * d3, f8 * d3, f9 * d3);
+        MovingObjectPosition movingobjectposition = par1World.rayTraceBlocks_flags(vec3d, vec3d1, par3, false);
+        return movingobjectposition;
+    }    
+    
     static {
         ItemSpade var10000 = new ItemSpade(0, 2);
         byte var1 = 82;
@@ -460,4 +488,9 @@
         var26.setIconIndex(var1);
         painting = var14;
     }
+    
+    public Item setName (String name) {
+    	this.name = name;
+    	return this;
+    }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemArmor.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemArmor.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemArmor.java	2021-11-10 11:11:52.670577200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemArmor.java	2021-11-14 15:04:23.527376400 +0100
@@ -1,11 +1,11 @@
 package net.minecraft.game.item;
 
-public final class ItemArmor extends Item {
+public class ItemArmor extends Item {
     private static final int[] damageReduceAmountArray = new int[]{3, 8, 6, 3};
     private static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
-    public final int armorType;
-    public final int damageReduceAmount;
-    public final int renderIndex;
+    public int armorType;
+    public int damageReduceAmount;
+    public int renderIndex;
 
     public ItemArmor(int var1, int var2, int var3, int var4) {
         super(var1);
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemAxe.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemAxe.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemAxe.java	2021-11-10 11:11:52.670577200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemAxe.java	2021-11-12 11:46:15.758968600 +0100
@@ -2,7 +2,7 @@
 
 import net.minecraft.game.block.Block;
 
-public final class ItemAxe extends ItemTool {
+public class ItemAxe extends ItemTool {
     private static Block[] blocksEffectiveAgainst;
 
     public ItemAxe(int var1, int var2) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemBlock.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemBlock.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemBlock.java	2021-11-10 11:11:52.686188600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemBlock.java	2021-12-13 22:34:38.106481800 +0100
@@ -2,10 +2,12 @@
 
 import net.minecraft.client.physics.AxisAlignedBB;
 import net.minecraft.game.block.Block;
+import net.minecraft.game.block.Material;
+import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemBlock extends Item {
-    private int blockID;
+public class ItemBlock extends Item {
+    protected int blockID;
 
     public ItemBlock(int var1) {
         super(var1);
@@ -13,7 +15,7 @@
         this.setIconIndex(Block.blocksList[var1 + 256].getBlockTextureFromSide(2));
     }
 
-    public final boolean onItemUse(ItemStack var1, World var2, int var3, int var4, int var5, int var6) {
+    public final boolean onItemUse(ItemStack var1, EntityPlayer entityPlayer, World var2, int var3, int var4, int var5, int var6) {
         if (var6 == 0) {
             --var4;
         }
@@ -42,12 +44,16 @@
             return false;
         } else if (var3 > 0 && var4 > 0 && var5 > 0 && var3 < var2.width - 1 && var4 < var2.height - 1 && var5 < var2.length - 1) {
             int var7 = var2.getBlockId(var3, var4, var5);
-            Block var9 = Block.blocksList[var7];
-            if (this.blockID > 0 && var9 == null || var9 == Block.waterMoving || var9 == Block.waterStill || var9 == Block.lavaMoving || var9 == Block.lavaStill || var9 == Block.fire) {
+            Block var9 = Block.blocksList[var7]; 
+            //if (this.blockID > 0 && var9 == null || var9 == Block.waterMoving || var9 == Block.waterStill || var9 == Block.lavaMoving || var9 == Block.lavaStill || var9 == Block.fire) {
+            if (this.blockID > 0 && var9 == null || var9 == Block.fire || var9.material == Material.water || var9.material == Material.lava) {
                 AxisAlignedBB var8 = (var9 = Block.blocksList[this.blockID]).getCollisionBoundingBoxFromPool(var3, var4, var5);
                 if (var2.checkIfAABBIsClear(var8) && var9.canPlaceBlockAt(var2, var3, var4, var5) && var2.setBlockWithNotify(var3, var4, var5, this.blockID)) {
-                    Block.blocksList[this.blockID].onBlockPlaced(var2, var3, var4, var5, var6);
-                    var2.playSoundAtPlayer((float)var3 + 0.5F, (float)var4 + 0.5F, (float)var5 + 0.5F, var9.stepSound.stepSoundDir2(), (var9.stepSound.soundVolume + 1.0F) / 2.0F, var9.stepSound.soundPitch * 0.8F);
+                    
+                	Block.blocksList[this.blockID].onBlockPlaced(var2, var3, var4, var5, var6);
+                	Block.blocksList[this.blockID].onBlockPlacedBy(var2, var3, var4, var5, entityPlayer);
+                	
+                	var2.playSoundAtPlayer((float)var3 + 0.5F, (float)var4 + 0.5F, (float)var5 + 0.5F, var9.stepSound.stepSoundDir2(), (var9.stepSound.soundVolume + 1.0F) / 2.0F, var9.stepSound.soundPitch * 0.8F);
                     --var1.stackSize;
                 }
             }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemBow.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemBow.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemBow.java	2021-11-10 11:11:52.686188600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemBow.java	2021-11-12 11:46:24.755938200 +0100
@@ -4,13 +4,13 @@
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemBow extends Item {
+public class ItemBow extends Item {
     public ItemBow(int var1) {
         super(5);
         this.maxStackSize = 1;
     }
 
-    public final ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+    public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
         if (var3.inventory.consumeInventoryItem(Item.arrow.shiftedIndex)) {
             var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (rand.nextFloat() * 0.4F + 0.8F));
             var2.spawnEntityInWorld(new EntityArrow(var2, var3));
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemFlintAndSteel.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemFlintAndSteel.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemFlintAndSteel.java	2021-11-10 11:11:52.686188600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemFlintAndSteel.java	2021-12-05 09:41:22.283260300 +0100
@@ -1,16 +1,17 @@
 package net.minecraft.game.item;
 
 import net.minecraft.game.block.Block;
+import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemFlintAndSteel extends Item {
+public class ItemFlintAndSteel extends Item {
     public ItemFlintAndSteel(int var1) {
         super(3);
         this.maxStackSize = 1;
         this.maxDamage = 64;
     }
 
-    public final boolean onItemUse(ItemStack var1, World var2, int var3, int var4, int var5, int var6) {
+    public boolean onItemUse(ItemStack var1, EntityPlayer entityPlayer, World var2, int var3, int var4, int var5, int var6) {
         if (var6 == 0) {
             --var4;
         }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemFood.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemFood.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemFood.java	2021-11-10 11:11:52.701828600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemFood.java	2021-12-14 10:05:11.009587000 +0100
@@ -13,6 +13,7 @@
     }
 
     public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+    	//var2.playSoundAtEntity(var3, "random.bow", 0.5F, 0.4F / (Item.rand.nextFloat() * 0.4F + 0.8F));
         --var1.stackSize;
         var3.heal(this.healAmount);
         return var1;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemHoe.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemHoe.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemHoe.java	2021-11-10 11:11:52.701828600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemHoe.java	2021-12-05 09:41:31.892337400 +0100
@@ -2,16 +2,17 @@
 
 import net.minecraft.game.block.Block;
 import net.minecraft.game.entity.other.EntityItem;
+import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemHoe extends Item {
+public class ItemHoe extends Item {
     public ItemHoe(int var1, int var2) {
         super(var1);
         this.maxStackSize = 1;
         this.maxDamage = 32 << var2;
     }
 
-    public final boolean onItemUse(ItemStack var1, World var2, int var3, int var4, int var5, int var6) {
+    public boolean onItemUse(ItemStack var1, EntityPlayer entityPlayer, World var2, int var3, int var4, int var5, int var6) {
         if (var3 > 0 && var4 > 0 && var5 > 0 && var3 < var2.width - 1 && var4 < var2.height - 1 && var5 < var2.length - 1) {
             var6 = var2.getBlockId(var3, var4, var5);
             if ((var2.getBlockMaterial(var3, var4 + 1, var5).isSolid() || var6 != Block.grass.blockID) && var6 != Block.dirt.blockID) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemPainting.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemPainting.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemPainting.java	2021-11-10 11:11:52.701828600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemPainting.java	2021-12-05 09:41:41.269192600 +0100
@@ -1,15 +1,16 @@
 package net.minecraft.game.item;
 
 import net.minecraft.game.entity.EntityPainting;
+import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemPainting extends Item {
+public class ItemPainting extends Item {
     public ItemPainting(int var1) {
         super(65);
         this.maxDamage = 64;
     }
 
-    public final boolean onItemUse(ItemStack var1, World var2, int var3, int var4, int var5, int var6) {
+    public boolean onItemUse(ItemStack var1, EntityPlayer entityPlayer, World var2, int var3, int var4, int var5, int var6) {
         if (var6 == 0) {
             return false;
         } else if (var6 == 1) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemPickaxe.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemPickaxe.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemPickaxe.java	2021-11-10 11:11:52.701828600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemPickaxe.java	2021-11-12 11:46:01.136183000 +0100
@@ -3,7 +3,7 @@
 import net.minecraft.game.block.Block;
 import net.minecraft.game.block.Material;
 
-public final class ItemPickaxe extends ItemTool {
+public class ItemPickaxe extends ItemTool {
     private static Block[] blocksEffectiveAgainst;
     private int harvestLevel;
 
@@ -12,7 +12,7 @@
         this.harvestLevel = var2;
     }
 
-    public final boolean canHarvestBlock(Block var1) {
+    public boolean canHarvestBlock(Block var1) {
         if (var1 == Block.obsidian) {
             return this.harvestLevel == 3;
         } else if (var1 != Block.blockDiamond && var1 != Block.oreDiamond) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSeeds.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSeeds.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSeeds.java	2021-11-10 11:11:52.701828600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSeeds.java	2021-12-05 09:41:50.800140200 +0100
@@ -1,9 +1,10 @@
 package net.minecraft.game.item;
 
 import net.minecraft.game.block.Block;
+import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemSeeds extends Item {
+public class ItemSeeds extends Item {
     private int blockType;
 
     public ItemSeeds(int var1, int var2) {
@@ -11,7 +12,7 @@
         this.blockType = var2;
     }
 
-    public final boolean onItemUse(ItemStack var1, World var2, int var3, int var4, int var5, int var6) {
+    public boolean onItemUse(ItemStack var1, EntityPlayer entityPlayer, World var2, int var3, int var4, int var5, int var6) {
         if (var6 != 1) {
             return false;
         } else if (var3 > 0 && var4 > 0 && var5 > 0 && var3 < var2.width - 1 && var4 < var2.height - 1 && var5 < var2.length - 1) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSoup.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSoup.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSoup.java	2021-11-10 11:11:52.701828600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSoup.java	2021-11-12 11:47:45.447350500 +0100
@@ -3,12 +3,12 @@
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.World;
 
-public final class ItemSoup extends ItemFood {
+public class ItemSoup extends ItemFood {
     public ItemSoup(int var1, int var2) {
         super(26, 10);
     }
 
-    public final ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
+    public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
         super.onItemRightClick(var1, var2, var3);
         return new ItemStack(Item.bowlEmpty);
     }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSpade.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSpade.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSpade.java	2021-11-10 11:11:52.717438700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSpade.java	2021-11-12 11:47:52.637219000 +0100
@@ -2,7 +2,7 @@
 
 import net.minecraft.game.block.Block;
 
-public final class ItemSpade extends ItemTool {
+public class ItemSpade extends ItemTool {
     private static Block[] blocksEffectiveAgainst;
 
     public ItemSpade(int var1, int var2) {
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSword.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSword.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemSword.java	2021-11-10 11:11:52.717438700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemSword.java	2021-11-12 11:44:23.664514600 +0100
@@ -2,8 +2,8 @@
 
 import net.minecraft.game.block.Block;
 
-public final class ItemSword extends Item {
-    private int weaponDamage;
+public class ItemSword extends Item {
+    public int weaponDamage;
 
     public ItemSword(int var1, int var2) {
         super(var1);
@@ -12,19 +12,19 @@
         this.weaponDamage = 4 + (var2 << 1);
     }
 
-    public final float getStrVsBlock(Block var1) {
+    public float getStrVsBlock(Block var1) {
         return 1.5F;
     }
 
-    public final void hitEntity(ItemStack var1) {
+    public void hitEntity(ItemStack var1) {
         var1.damageItem(1);
     }
 
-    public final void onBlockDestroyed(ItemStack var1) {
+    public void onBlockDestroyed(ItemStack var1) {
         var1.damageItem(2);
     }
 
-    public final int getDamageVsEntity() {
+    public int getDamageVsEntity() {
         return this.weaponDamage;
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemTool.java MCP-LTS/src/minecraft/net/minecraft/game/item/ItemTool.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/item/ItemTool.java	2021-11-10 11:11:52.717438700 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/item/ItemTool.java	2021-11-12 11:40:23.153406400 +0100
@@ -4,8 +4,8 @@
 
 public class ItemTool extends Item {
     private Block[] blocksEffectiveAgainst;
-    private float efficiencyOnProperMaterial = 4.0F;
-    private int damageVsEntity;
+    public float efficiencyOnProperMaterial = 4.0F;
+    public int damageVsEntity;
 
     public ItemTool(int var1, int var2, int var3, Block[] var4) {
         super(var1);
@@ -16,7 +16,7 @@
         this.damageVsEntity = var2 + var3;
     }
 
-    public final float getStrVsBlock(Block var1) {
+    public float getStrVsBlock(Block var1) {
         for(int var2 = 0; var2 < this.blocksEffectiveAgainst.length; ++var2) {
             if (this.blocksEffectiveAgainst[var2] == var1) {
                 return this.efficiencyOnProperMaterial;
@@ -26,15 +26,15 @@
         return 1.0F;
     }
 
-    public final void hitEntity(ItemStack var1) {
+    public void hitEntity(ItemStack var1) {
         var1.damageItem(2);
     }
 
-    public final void onBlockDestroyed(ItemStack var1) {
+    public void onBlockDestroyed(ItemStack var1) {
         var1.damageItem(1);
     }
 
-    public final int getDamageVsEntity() {
+    public int getDamageVsEntity() {
         return this.damageVsEntity;
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/EntityMap.java MCP-LTS/src/minecraft/net/minecraft/game/level/EntityMap.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/EntityMap.java	2021-11-10 11:11:52.733077200 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/level/EntityMap.java	2021-12-20 22:56:29.791244600 +0100
@@ -11,11 +11,12 @@
     public int height;
     private EntityMapSlot slot = new EntityMapSlot(this);
     private EntityMapSlot slot2 = new EntityMapSlot(this);
-    public List[] entityGrid;
-    public List entities = new ArrayList();
-    private List entitiesExcludingEntity = new ArrayList();
+    public List<Entity>[] entityGrid;
+    public List<Entity> entities = new ArrayList<Entity>();
+    private List<Entity> entitiesExcludingEntity = new ArrayList<Entity>();
 
-    public EntityMap(int var1, int var2, int var3) {
+    @SuppressWarnings("unchecked")
+	public EntityMap(int var1, int var2, int var3) {
         this.width = var1 / 8;
         this.depth = var2 / 8;
         this.height = var3 / 8;
@@ -36,7 +37,7 @@
         for(var1 = 0; var1 < this.width; ++var1) {
             for(var2 = 0; var2 < this.depth; ++var2) {
                 for(var3 = 0; var3 < this.height; ++var3) {
-                    this.entityGrid[(var3 * this.depth + var2) * this.width + var1] = new ArrayList();
+                    this.entityGrid[(var3 * this.depth + var2) * this.width + var1] = new ArrayList<Entity>();
                 }
             }
         }
@@ -57,12 +58,12 @@
         this.entities.remove(var1);
     }
 
-    public final List getEntities(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
+    public final List<Entity> getEntities(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
         this.entitiesExcludingEntity.clear();
         return this.getEntities(var1, var2, var3, var4, var5, var6, var7, this.entitiesExcludingEntity);
     }
 
-    private List getEntities(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7, List var8) {
+    private List<Entity> getEntities(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7, List<Entity> var8) {
         EntityMapSlot var9 = this.slot.init(var2, var3, var4);
         EntityMapSlot var10 = this.slot2.init(var5, var6, var7);
 
@@ -70,11 +71,11 @@
             for(int var12 = EntityMapSlot.b(var9) - 1; var12 <= EntityMapSlot.b(var10) + 1; ++var12) {
                 for(int var13 = EntityMapSlot.c(var9) - 1; var13 <= EntityMapSlot.c(var10) + 1; ++var13) {
                     if (var11 >= 0 && var12 >= 0 && var13 >= 0 && var11 < this.width && var12 < this.depth && var13 < this.height) {
-                        List var14 = this.entityGrid[(var13 * this.depth + var12) * this.width + var11];
+                        List<Entity> var14 = this.entityGrid[(var13 * this.depth + var12) * this.width + var11];
 
                         for(int var15 = 0; var15 < var14.size(); ++var15) {
                             Entity var16;
-                            if ((var16 = (Entity)var14.get(var15)) != var1) {
+                            if ((var16 = var14.get(var15)) != var1) {
                                 AxisAlignedBB var17 = var16.boundingBox;
                                 if (var5 > var17.minX && var2 < var17.maxX ? (var6 > var17.minY && var3 < var17.maxY ? var7 > var17.minZ && var4 < var17.maxZ : false) : false) {
                                     var8.add(var16);
@@ -89,7 +90,7 @@
         return var8;
     }
 
-    public final List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+    public final List<Entity> getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
         this.entitiesExcludingEntity.clear();
         return var2 == null ? this.entitiesExcludingEntity : this.getEntities(var1, var2.minX, var2.minY, var2.minZ, var2.maxX, var2.maxY, var2.maxZ, this.entitiesExcludingEntity);
     }
@@ -97,7 +98,7 @@
     public final void updateEntities() {
         for(int var1 = 0; var1 < this.entities.size(); ++var1) {
             Entity var2;
-            (var2 = (Entity)this.entities.get(var1)).lastTickPosX = var2.posX;
+            (var2 = this.entities.get(var1)).lastTickPosX = var2.posX;
             var2.lastTickPosY = var2.posY;
             var2.lastTickPosZ = var2.posZ;
             var2.onEntityUpdate();
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/LevelLoader.java MCP-LTS/src/minecraft/net/minecraft/game/level/LevelLoader.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/LevelLoader.java	2021-11-10 11:11:52.748702600 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/level/LevelLoader.java	2021-12-25 21:44:46.190489700 +0100
@@ -4,6 +4,9 @@
 import com.mojang.nbt.NBTTagCompound;
 import com.mojang.nbt.NBTTagList;
 import com.mojang.nbt.NBTTagShort;
+import com.mojontwins.modloader.ModLoader;
+import com.mojontwins.modloader.registry.RegistrySet;
+
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -52,10 +55,24 @@
         short var7 = var3.getShort("Length");
         short var8 = var3.getShort("Height");
         World var9 = new World();
+        
+        if (this.guiLoading != null) {
+            this.guiLoading.displayLoadingString("Loading registry..");
+        }
+        
+        NBTTagCompound nbtRegistry = var13.getCompoundTag("Registry");
+        RegistrySet newRegistry = new RegistrySet ();
+        newRegistry.readFromNBT(nbtRegistry);
+        
         if (this.guiLoading != null) {
             this.guiLoading.displayLoadingString("Preparing level..");
         }
+        
+        byte[] blocks = var3.getByteArray("Blocks");
 
+        ModLoader.translation = ModLoader.registrySet.generateTranslationTable(newRegistry);
+        ModLoader.translateBlocks(blocks);
+        
         NBTTagList var10 = var3.getTagList("Spawn");
         var9.xSpawn = ((NBTTagShort)var10.tagAt(0)).shortValue;
         var9.ySpawn = ((NBTTagShort)var10.tagAt(1)).shortValue;
@@ -78,10 +95,11 @@
         var9.cloudHeight = var4.getShort("CloudHeight");
         var9.groundLevel = var4.getShort("SurroundingGroundHeight");
         var9.waterLevel = var4.getShort("SurroundingWaterHeight");
-        var9.defaultFluid = var4.getByte("SurroundingWaterType");
+        var9.defaultFluid = ModLoader.translation[var4.getByte("SurroundingWaterType")] & 0xff;
         var9.worldTime = var4.getShort("TimeOfDay");
         var9.skylightSubtracted = var9.getSkyBrightness();
-        var9.generate(var6, var8, var7, var3.getByteArray("Blocks"), var3.getByteArray("Data"));
+        var9.levelType = ModLoader.translation[var4.getShort("LevelType")];
+        var9.generate(var6, var8, var7, blocks, var3.getByteArray("Data"));
         if (this.guiLoading != null) {
             this.guiLoading.displayLoadingString("Preparing entities..");
         }
@@ -124,7 +142,7 @@
                 var11.printStackTrace();
             }
         }
-
+        
         return var9;
     }
 
@@ -145,12 +163,14 @@
             return new EntityGiantZombie(var1);
         } else if (var2.equals("Item")) {
             return new EntityItem(var1);
-        } else {
-            return var2.equals("Painting") ? new EntityPainting(var1) : null;
+        } else if (var2.equals("Painting")) {
+            return new EntityPainting(var1);
+        } else { 
+        	return ModLoader.loadEntity(var1, var2);
         }
     }
 
-    public final void save(World var1, OutputStream var2) throws IOException {
+   public final void save(World var1, OutputStream var2) throws IOException {
         if (this.guiLoading != null) {
             this.guiLoading.displayProgressMessage("Saving level");
         }
@@ -170,6 +190,7 @@
         var3.setByte("SurroundingGroundType", (byte)Block.grass.blockID);
         var3.setByte("SurroundingWaterType", (byte)var1.defaultFluid);
         var3.setShort("TimeOfDay", (short)var1.worldTime);
+        var3.setShort("LevelType", (short)var1.levelType);
         NBTTagCompound var4;
         (var4 = new NBTTagCompound()).setShort("Width", (short)var1.width);
         var4.setShort("Length", (short)var1.length);
@@ -190,7 +211,7 @@
         }
 
         NBTTagList var6 = new NBTTagList();
-        Iterator var7 = var1.entityMap.entities.iterator();
+        Iterator<Entity> var7 = var1.entityMap.entities.iterator();
 
         while(var7.hasNext()) {
             Entity var8 = (Entity)var7.next();
@@ -202,7 +223,7 @@
         }
 
         NBTTagList var16 = new NBTTagList();
-        Iterator var17 = var1.map.keySet().iterator();
+        Iterator<Integer> var17 = var1.map.keySet().iterator();
 
         while(var17.hasNext()) {
             int var19 = (Integer)var17.next();
@@ -219,6 +240,7 @@
         var18.setCompoundTag("Environment", var3);
         var18.setTag("Entities", var6);
         var18.setTag("TileEntities", var16);
+        var18.setCompoundTag("Registry", ModLoader.registrySet.writeToNBT(new NBTTagCompound()));
         if (this.guiLoading != null) {
             this.guiLoading.displayLoadingString("Writing..");
         }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/Spawner.java MCP-LTS/src/minecraft/net/minecraft/game/level/Spawner.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/Spawner.java	2021-11-10 11:11:52.764314300 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/level/Spawner.java	2021-11-28 09:51:51.051724900 +0100
@@ -1,5 +1,10 @@
 package net.minecraft.game.level;
 
+import java.util.HashMap;
+import java.util.Iterator;
+
+import com.mojontwins.modloader.ModLoader;
+
 import net.minecraft.game.entity.Entity;
 import net.minecraft.game.entity.EntityLiving;
 import net.minecraft.game.entity.animal.EntityAnimal;
@@ -13,13 +18,35 @@
 
 public class Spawner {
     private World worldObj;
+    
+    public static HashMap<Integer,Class<? extends Entity>> availableMonsterEntities;
+    public static HashMap<Integer,Class<? extends Entity>> availableAnimalEntities;
+    
+    static {
+    	availableMonsterEntities = new HashMap<Integer,Class<? extends Entity>>();
+    	availableAnimalEntities = new HashMap<Integer,Class<? extends Entity>>();
+    }
+    
+    public static void resetMobHashMaps () {
+    	availableMonsterEntities.clear();
+    	availableMonsterEntities.put(0, EntitySkeleton.class);
+    	availableMonsterEntities.put(1, EntityCreeper.class);
+    	availableMonsterEntities.put(2, EntitySpider.class);
+    	availableMonsterEntities.put(3, EntityZombie.class);
+    	
+    	availableAnimalEntities.clear();
+    	availableAnimalEntities.put(0, EntityPig.class);
+    	availableAnimalEntities.put(1, EntitySheep.class);
+    }
 
     public Spawner(World var1) {
         this.worldObj = var1;
     }
 
     public final void performSpawning() {
-        int var1 = this.worldObj.width * this.worldObj.length * this.worldObj.height * 20 / 64 / 64 / 64 / 2;
+        //int var1 = this.worldObj.width * this.worldObj.length * this.worldObj.height * 20 / 64 / 64 / 64 / 2;
+    	int var1 = (this.worldObj.width * this.worldObj.length * this.worldObj.height * 20) >> 19;
+    	
         if (this.worldObj.difficultySetting == 0) {
             var1 = 0 / 4;
         }
@@ -29,16 +56,20 @@
         }
 
         if (this.worldObj.difficultySetting == 2) {
-            var1 = (var1 << 2) / 4;
+            // var1 = (var1 << 2) / 4; // WTF, this does nothing!
         }
 
         if (this.worldObj.difficultySetting == 3) {
             var1 = var1 * 6 / 4;
         }
-
+        
         int var2 = this.worldObj.width * this.worldObj.length / 4000;
         int var3 = this.worldObj.entitiesInLevelList(EntityMob.class);
 
+        // ModLoader hook
+        var1 = ModLoader.spawnerSetMaxHostileMobs (var1, this.worldObj);
+        var2 = ModLoader.spawnerSetMaxNonHostileMobs (var2, this.worldObj);
+        
         int var4;
         EntityLiving var5;
         int var6;
@@ -64,11 +95,20 @@
                 var5 = this.worldObj.playerEntity;
                 var22 = this;
                 var6 = 0;
-                var7 = this.worldObj.random.nextInt(5);
+                
+                int monsterSelector = this.worldObj.random.nextInt(availableMonsterEntities.size());
+                Iterator<Integer> it = availableMonsterEntities.keySet().iterator();
+                do {
+                	var7 = (Integer)it.next ();
+                } while (0 < monsterSelector --);
+                
                 var8 = this.worldObj.random.nextInt(this.worldObj.width);
                 var9 = (int)(Math.min(this.worldObj.random.nextFloat(), this.worldObj.random.nextFloat()) * (float)this.worldObj.height);
                 var10 = this.worldObj.random.nextInt(this.worldObj.length);
 
+                // ModLoader hook
+                var7 = ModLoader.spawnerSelectMonster (var7);
+                
                 for(var11 = 0; var11 < 2; ++var11) {
                     var12 = var8;
                     var13 = var9;
@@ -97,28 +137,21 @@
                                     continue;
                                 }
                             }
-
-                            var23 = null;
-                            if (var7 == 0) {
-                                var23 = new EntitySkeleton(var22.worldObj);
-                            }
-
-                            if (var7 == 1) {
-                                var23 = new EntityCreeper(var22.worldObj);
-                            }
-
-                            if (var7 == 2) {
-                                var23 = new EntitySpider(var22.worldObj);
-                            }
-
-                            if (var7 == 3) {
-                                var23 = new EntityZombie(var22.worldObj);
+                            
+                            // ModLoader hook
+                            var7 = ModLoader.spawnerSelectMonsterBasedOnPosition (var7, this.worldObj, var12, var13, var14);
+
+                            try {
+                            	var23 = (availableMonsterEntities.get(var7)).getConstructor (World.class).newInstance (var22.worldObj);
+                            } catch (Exception e) {
+                            	// ModLoader hook
+                            	var23 = ModLoader.spawnMonster (var7, var22.worldObj);
                             }
 
                             if (var23 instanceof EntityMob && var22.worldObj.difficultySetting == 0) {
                                 var23 = null;
                             }
-
+                            
                             if (var23 != null && !var22.worldObj.isBlockNormalCube(var12, var13, var14) && var22.worldObj.isBlockNormalCube(var12, var13 - 1, var14) && ((EntityLiving)var23).getCanSpawnHere(var16, var17, var18)) {
                                 var21 = var22.worldObj.random.nextFloat() * 360.0F;
                                 ((EntityLiving)var23).setPositionAndRotation(var16, var17, var18, var21, 0.0F);
@@ -140,10 +173,20 @@
                 var5 = this.worldObj.playerEntity;
                 var22 = this;
                 var6 = 0;
-                var7 = this.worldObj.random.nextInt(2);
+                
+                int animalSelector = this.worldObj.random.nextInt(availableAnimalEntities.size());
+                Iterator<Integer> it = availableAnimalEntities.keySet().iterator();
+
+                do {
+                	var7 = (Integer)it.next ();
+                } while (0 < animalSelector --);
+               
                 var8 = this.worldObj.random.nextInt(this.worldObj.width);
                 var9 = this.worldObj.random.nextInt(this.worldObj.height);
                 var10 = this.worldObj.random.nextInt(this.worldObj.length);
+                
+                // ModLoader hook
+                var7 = ModLoader.spawnerSelectAnimal (var7);
 
                 for(var11 = 0; var11 < 2; ++var11) {
                     var12 = var8;
@@ -173,16 +216,17 @@
                                     continue;
                                 }
                             }
-
-                            var23 = null;
-                            if (var7 == 0) {
-                                var23 = new EntityPig(var22.worldObj);
+                            
+                            // ModLoader hook
+                            var7 = ModLoader.spawnerSelectAnimalBasedOnPosition (var7, this.worldObj, var12, var13, var14);
+
+                            try {
+                            	var23 = (availableAnimalEntities.get(var7)).getConstructor (World.class).newInstance (var22.worldObj);
+                            } catch (Exception e) {
+                            	// ModLoader hook
+                            	var23 = ModLoader.spawnAnimal (var7, var22.worldObj);
                             }
-
-                            if (var7 == 1) {
-                                var23 = new EntitySheep(var22.worldObj);
-                            }
-
+                                                        
                             if (var23 != null && !var22.worldObj.isBlockNormalCube(var12, var13, var14) && var22.worldObj.isBlockNormalCube(var12, var13 - 1, var14) && ((EntityLiving)var23).getCanSpawnHere(var16, var17, var18)) {
                                 var21 = var22.worldObj.random.nextFloat() * 360.0F;
                                 ((EntityLiving)var23).setPositionAndRotation(var16, var17, var18, var21, 0.0F);
@@ -196,6 +240,5 @@
                 var4 += var6;
             }
         }
-
     }
 }
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/World.java MCP-LTS/src/minecraft/net/minecraft/game/level/World.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/World.java	2021-11-10 11:11:52.779939900 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/level/World.java	2021-12-20 22:58:39.640872100 +0100
@@ -8,6 +8,9 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.TreeSet;
+
+import com.mojontwins.modloader.ModLoader;
+
 import net.minecraft.client.physics.AxisAlignedBB;
 import net.minecraft.client.physics.MovingObjectPosition;
 import net.minecraft.client.renderer.Vec3D;
@@ -35,11 +38,11 @@
     public int zSpawn;
     public float rotSpawn;
     public int defaultFluid;
-    List worldAccesses;
-    private List tickList;
-    public Map map;
-    private List list;
-    int[] heightMap;
+    List<IWorldAccess> worldAccesses;
+    private List<NextTickListEntry> tickList;
+    public Map<Integer,TileEntity> map;
+    private List<TileEntity> list;
+    public int[] heightMap;
     public Random random;
     private Random rand;
     private int randId;
@@ -51,7 +54,6 @@
     public int fogColor;
     public int cloudColor;
     private int updateLCG;
-    private int playTime;
     public EntityLiving playerEntity;
     public boolean survivalWorld;
     public int skyBrightness;
@@ -64,18 +66,21 @@
     private int[] coords;
     private int[] floodedBlocks;
     public int difficultySetting;
+    public int levelType;
+    
+    public int highestGround[];
+    public int lowestGround[];
 
     public World() {
         this.defaultFluid = Block.waterMoving.blockID;
-        this.worldAccesses = new ArrayList();
-        this.tickList = new LinkedList();
-        this.map = new HashMap();
-        this.list = new ArrayList();
+        this.worldAccesses = new ArrayList<IWorldAccess>();
+        this.tickList = new LinkedList<NextTickListEntry>();
+        this.map = new HashMap<Integer, TileEntity>();
+        this.list = new ArrayList<TileEntity>();
         this.random = new Random();
         this.rand = new Random();
         this.randId = this.random.nextInt();
         this.updateLCG = 0;
-        this.playTime = 0;
         this.survivalWorld = true;
         this.skyBrightness = 15;
         this.skylightSubtracted = 15;
@@ -94,13 +99,13 @@
         if (this.blocks == null) {
             throw new RuntimeException("The level is corrupt!");
         } else {
-            this.worldAccesses = new ArrayList();
+            this.worldAccesses = new ArrayList<IWorldAccess>();
             this.heightMap = new int[this.width * this.length];
             Arrays.fill(this.heightMap, this.height);
             this.lightUpdates.updateSkylight(0, 0, this.width, this.length);
             this.random = new Random();
             this.randId = this.random.nextInt();
-            this.tickList = new ArrayList();
+            this.tickList = new ArrayList<NextTickListEntry>();
             if (this.entityMap == null) {
                 this.entityMap = new EntityMap(this.width, this.height, this.length);
             }
@@ -129,7 +134,7 @@
                     } else if (var7 < this.groundLevel - 1) {
                         var8 = Block.bedrock.blockID;
                     } else if (var7 < this.groundLevel) {
-                        if (this.groundLevel > this.waterLevel && this.defaultFluid == Block.waterMoving.blockID) {
+                        if (this.groundLevel > this.waterLevel && this.defaultFluid != Block.lavaMoving.blockID) {
                             var8 = Block.grass.blockID;
                         } else {
                             var8 = Block.dirt.blockID;
@@ -151,7 +156,6 @@
         if (var5 == null) {
             this.data = new byte[var4.length];
             this.lightUpdates = new WorldLight(this);
-            boolean var10 = true;
             World var11 = this;
             var2 = this.skylightSubtracted;
 
@@ -184,21 +188,48 @@
         }
 
         for(var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-            ((IWorldAccess)this.worldAccesses.get(var2)).loadRenderers();
+            this.worldAccesses.get(var2).loadRenderers();
         }
 
         this.tickList.clear();
         this.findSpawn();
         this.load();
+        
+        highestGround = new int [width * length];
+        lowestGround = new int [width * length];
+        
+        for (int x = 0; x < this.width; x ++) {
+        	for (int z = 0; z < this.length; z ++) {
+        		int y = this.height; while (y > 0) {
+        			y --; if (this.getBlockId(x, y, z) != 0) break;
+        		}
+        		highestGround [x + z * this.width] = y;
+        		
+        		y = 0; while (y < this.height) {
+        			if (this.getBlockId(x, y, z) != 0) break;
+        			y ++;
+        		}
+        		lowestGround [x + z * this.width] = y;
+        	}
+        }
+        
         System.gc();
     }
+    
+    public int getHighestGround (int x, int z) {
+    	return highestGround [x + z * this.width];
+    }
 
+    public int getLowestGround (int x, int z) {
+    	return lowestGround [x + z * this.width];
+    }
+    
     public final void findSpawn() {
         Random var1 = new Random();
         int var2 = 0;
 
         while(true) {
-            label58:
+            // label58:
             while(true) {
                 int var3;
                 int var4;
@@ -219,6 +250,8 @@
                     } while(var5 < 4);
                 } while(var5 <= this.waterLevel);
 
+                // Fix: will make the house happen anyway!
+                /*
                 int var6;
                 int var7;
                 int var8;
@@ -241,6 +274,7 @@
                         }
                     }
                 }
+                */
 
                 this.xSpawn = var3;
                 this.ySpawn = var5;
@@ -266,8 +300,8 @@
         this.worldAccesses.remove(var1);
     }
 
-    public final ArrayList getCollidingBoundingBoxes(AxisAlignedBB var1) {
-        ArrayList var2 = new ArrayList();
+    public final ArrayList<AxisAlignedBB> getCollidingBoundingBoxes(AxisAlignedBB var1) {
+        ArrayList<AxisAlignedBB> var2 = new ArrayList<AxisAlignedBB>();
         int var3 = (int)var1.minX;
         int var4 = (int)var1.maxX + 1;
         int var5 = (int)var1.minY;
@@ -286,7 +320,7 @@
             --var7;
         }
 
-        for(var3 = var3; var3 < var4; ++var3) {
+        for(; var3 < var4; ++var3) {
             for(int var9 = var5; var9 < var6; ++var9) {
                 for(int var10 = var7; var10 < var8; ++var10) {
                     Block var11;
@@ -340,7 +374,7 @@
                 }
 
                 for(var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-                    ((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
+                    this.worldAccesses.get(var4).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
                 }
 
                 return true;
@@ -358,6 +392,12 @@
             return false;
         }
     }
+    
+    public final boolean setBlockAndMetadataWithNotify(int x, int y, int z, int blockID, int meta) {
+    	boolean res = this.setBlockWithNotify(x, y, z, blockID);
+    	if (res) this.setBlockMetadata(x, y, z, meta);
+    	return res;
+    }
 
     public final void notifyBlocksOfNeighborChange(int var1, int var2, int var3, int var4) {
         this.notifyBlockOfNeighborChange(var1 - 1, var2, var3, var4);
@@ -423,7 +463,7 @@
         this.entityMap.updateEntities();
 
         for(int var1 = 0; var1 < this.list.size(); ++var1) {
-            ((TileEntity)this.list.get(var1)).updateEntity();
+            this.list.get(var1).updateEntity();
         }
 
     }
@@ -540,7 +580,6 @@
             this.updateChunkLight(this.skylightSubtracted + 1);
         }
 
-        ++this.playTime;
         var1 = 1;
 
         int var2;
@@ -563,7 +602,7 @@
         int var10;
         for(var7 = 0; var7 < var6; ++var7) {
             NextTickListEntry var8;
-            if ((var8 = (NextTickListEntry)this.tickList.remove(0)).scheduledTime > 0) {
+            if ((var8 = this.tickList.remove(0)).scheduledTime > 0) {
                 --var8.scheduledTime;
                 this.tickList.add(var8);
             } else {
@@ -595,7 +634,7 @@
 
     }
 
-    public final int entitiesInLevelList(Class var1) {
+    public final int entitiesInLevelList(Class<?> var1) {
         int var2 = 0;
 
         for(int var3 = 0; var3 < this.entityMap.entities.size(); ++var3) {
@@ -681,7 +720,7 @@
         int var6 = (int)var1.minZ;
         int var10 = (int)var1.maxZ + 1;
 
-        for(var2 = var2; var2 < var3; ++var2) {
+        for(; var2 < var3; ++var2) {
             for(int var7 = var4; var7 < var5; ++var7) {
                 for(int var8 = var6; var8 < var10; ++var8) {
                     int var9;
@@ -703,7 +742,7 @@
         int var7 = (int)var1.minZ;
         int var11 = (int)var1.maxZ + 1;
 
-        for(var3 = var3; var3 < var4; ++var3) {
+        for(; var3 < var4; ++var3) {
             for(int var8 = var5; var8 < var6; ++var8) {
                 for(int var9 = var7; var9 < var11; ++var9) {
                     Block var10;
@@ -732,7 +771,7 @@
     }
 
     public final boolean checkIfAABBIsClear(AxisAlignedBB var1) {
-        List var4 = this.entityMap.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
+		List<Entity> var4 = this.entityMap.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
 
         for(int var2 = 0; var2 < var4.size(); ++var2) {
             if (((Entity)var4.get(var2)).preventEntitySpawning) {
@@ -743,7 +782,7 @@
         return true;
     }
 
-    public final List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+    public final List<Entity> getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
         return this.entityMap.getEntitiesWithinAABBExcludingEntity(var1, var2);
     }
 
@@ -861,7 +900,7 @@
         this.data[(var2 * this.length + var3) * this.width + var1] = (byte)((this.data[(var2 * this.length + var3) * this.width + var1] & 15) + (var4 << 4));
 
         for(var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-            ((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
+            this.worldAccesses.get(var4).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
         }
 
     }
@@ -873,8 +912,16 @@
     public final boolean isWater(int var1, int var2, int var3) {
         return (var1 = this.getBlockId(var1, var2, var3)) > 0 && Block.blocksList[var1].material == Material.water;
     }
-
+    
     public final MovingObjectPosition rayTraceBlocks(Vec3D var1, Vec3D var2) {
+    	return rayTraceBlocks_flags(var1, var2, false, false);
+    }
+
+    public final MovingObjectPosition rayTraceBlocks_flag(Vec3D var1, Vec3D var2, boolean waterCollides) {
+    	return rayTraceBlocks_flags(var1, var2, waterCollides, false);
+    }
+    
+    public final MovingObjectPosition rayTraceBlocks_flags(Vec3D var1, Vec3D var2, boolean waterCollides, boolean flag2) {
         if (!Float.isNaN(var1.xCoord) && !Float.isNaN(var1.yCoord) && !Float.isNaN(var1.zCoord)) {
             if (!Float.isNaN(var2.xCoord) && !Float.isNaN(var2.yCoord) && !Float.isNaN(var2.zCoord)) {
                 int var3 = MathHelper.floor_float(var2.xCoord);
@@ -883,16 +930,17 @@
                 int var6 = MathHelper.floor_float(var1.xCoord);
                 int var7 = MathHelper.floor_float(var1.yCoord);
                 int var8 = MathHelper.floor_float(var1.zCoord);
-                int var9 = 20;
-
-                int var21;
-                MovingObjectPosition var22;
-                Block var23;
-                do {
-                    if (var9-- < 0) {
-                        return null;
+                               
+                for (int var9 = 0; var9 < 20; var9 ++) {
+                	
+                    int blockID = getBlockId (var6, var7, var8);
+                    int metadata = getBlockMetadata (var6, var7, var8);
+                    Block block = Block.blocksList[blockID];
+                    if ((!flag2 || block.getCollisionBoundingBoxFromPool(var6, var7, var8) != null) && blockID > 0 && block.canCollideCheck(metadata, waterCollides)) {
+                    	MovingObjectPosition movingobjectposition = block.collisionRayTrace(this, var6, var7, var8, var1, var2);
+                    	if (movingobjectposition != null) return movingobjectposition;
                     }
-
+                    
                     if (Float.isNaN(var1.xCoord) || Float.isNaN(var1.yCoord) || Float.isNaN(var1.zCoord)) {
                         return null;
                     }
@@ -998,11 +1046,14 @@
                         ++var20.zCoord;
                     }
 
-                    var21 = this.getBlockId(var6, var7, var8);
-                    var23 = Block.blocksList[var21];
-                } while(var21 <= 0 || !var23.isCollidable() || (var22 = var23.collisionRayTrace(this, var6, var7, var8, var1, var2)) == null);
+                    blockID = this.getBlockId(var6, var7, var8);
+                    metadata = this.getBlockMetadata(var6, var7, var8);
+                    block = Block.blocksList[blockID];
+                                        
+                    // while(var21 <= 0 || !var23.isCollidable() || (var22 = var23.collisionRayTrace(this, var6, var7, var8, var1, var2)) == null);
+                } 
 
-                return var22;
+                return null;
             } else {
                 return null;
             }
@@ -1087,7 +1138,7 @@
         var1.setWorld(this);
 
         for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-            ((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
+            this.worldAccesses.get(var2).obtainEntitySkin(var1);
         }
 
     }
@@ -1096,14 +1147,14 @@
         this.entityMap.remove(var1);
 
         for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-            ((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(var1);
+            this.worldAccesses.get(var2).releaseEntitySkin(var1);
         }
 
     }
 
     public final void createExplosion(Entity var1, float var2, float var3, float var4, float var5) {
         this.playSoundAtPlayer(var2, var3, var4, "random.explode", 4.0F, (1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F) * 0.7F);
-        TreeSet var6 = new TreeSet();
+        TreeSet<Integer> var6 = new TreeSet<Integer>();
         float var7 = var5;
 
         int var8;
@@ -1159,7 +1210,7 @@
         int var30 = (int)(var3 + var5 + 1.0F);
         int var31 = (int)(var4 - var5 - 1.0F);
         int var32 = (int)(var4 + var5 + 1.0F);
-        List var33 = this.entityMap.getEntities(var1, (float)var8, (float)var10, (float)var31, (float)var9, (float)var30, (float)var32);
+        List<Entity> var33 = this.entityMap.getEntities(var1, (float)var8, (float)var10, (float)var31, (float)var9, (float)var30, (float)var32);
         Vec3D var34 = new Vec3D(var2, var3, var4);
 
         float var28;
@@ -1189,12 +1240,12 @@
         }
 
         var5 = var7;
-        ArrayList var36;
-        (var36 = new ArrayList()).addAll(var6);
+        ArrayList<Integer> var36;
+        (var36 = new ArrayList<Integer>()).addAll(var6);
 
         for(int var38 = var36.size() - 1; var38 >= 0; --var38) {
             int var39;
-            var8 = (var39 = (Integer)var36.get(var38)) & 1023;
+            var8 = (var39 = var36.get(var38)) & 1023;
             var19 = var39 >> 10 & 1023;
             var20 = var39 >> 20 & 1023;
             if (var8 >= 0 && var19 >= 0 && var20 >= 0 && var8 < this.width && var19 < this.height && var20 < this.length) {
@@ -1254,7 +1305,7 @@
         return (float)var6 / (float)var7;
     }
 
-    public final Entity findSubclassOf(Class var1) {
+    public final Entity findSubclassOf(Class<?> var1) {
         for(int var2 = 0; var2 < this.entityMap.entities.size(); ++var2) {
             Entity var3 = (Entity)this.entityMap.entities.get(var2);
             if (var1.isAssignableFrom(var3.getClass())) {
@@ -1274,6 +1325,9 @@
             int var20 = var9 + 1;
             this.coords[0] = var1 + (var3 << 10);
             int var11 = -9999;
+            
+            var11 = ModLoader.customFluidSource (var4);
+            
             if (var4 == Block.waterStill.blockID || var4 == Block.waterMoving.blockID) {
                 var11 = Block.waterSource.blockID;
             }
@@ -1473,7 +1527,7 @@
             }
 
             if (this.playerEntity.getDistanceSqToEntity(var1) < var6 * var6) {
-                ((IWorldAccess)this.worldAccesses.get(var5)).playSound(var2, var1.posX, var1.posY - var1.yOffset, var1.posZ, var3, var4);
+                this.worldAccesses.get(var5).playSound(var2, var1.posX, var1.posY - var1.yOffset, var1.posZ, var3, var4);
             }
         }
 
@@ -1482,7 +1536,7 @@
     public final void playSoundEffect(float var1, float var2, float var3, String var4, float var5) {
         try {
             for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-                ((IWorldAccess)this.worldAccesses.get(var7)).playMusic(var4, var1, var2, var3, 0.0F);
+                this.worldAccesses.get(var7).playMusic(var4, var1, var2, var3, 0.0F);
             }
 
         } catch (Exception var6) {
@@ -1502,7 +1556,7 @@
                 float var10 = var2 - this.playerEntity.posY;
                 float var11 = var3 - this.playerEntity.posZ;
                 if (var9 * var9 + var10 * var10 + var11 * var11 < var8 * var8) {
-                    ((IWorldAccess)this.worldAccesses.get(var7)).playSound(var4, var1, var2, var3, var5, var6);
+                    this.worldAccesses.get(var7).playSound(var4, var1, var2, var3, var5, var6);
                 }
             }
 
@@ -1553,16 +1607,21 @@
     }
 
     public final void removeBlockTileEntity(int var1, int var2, int var3) {
-        this.list.remove(this.map.remove(var1 + (var2 << 10) + (var3 << 10 << 10)));
+        int index = var1 + (var2 << 10) + (var3 << 10 << 10);
+        TileEntity var5;
+        if ((var5 = this.map.get(index)) != null) {
+        	var5.onTileEntityRemoved(this, var1, var2, var3);
+        }
+    	this.list.remove(this.map.remove(index));
     }
 
     public final TileEntity getBlockTileEntity(int var1, int var2, int var3) {
         int var4 = var1 + (var2 << 10) + (var3 << 10 << 10);
         TileEntity var5;
-        if ((var5 = (TileEntity)this.map.get(var4)) == null) {
+        if ((var5 = this.map.get(var4)) == null) {
             int var6 = this.getBlockId(var1, var2, var3);
-            ((BlockContainer)Block.blocksList[var6]).onBlockAdded(this, var1, var2, var3);
-            var5 = (TileEntity)this.map.get(var4);
+            if (Block.blocksList[var6] != null) ((BlockContainer)Block.blocksList[var6]).onBlockAdded(this, var1, var2, var3);
+            var5 = this.map.get(var4);
         }
 
         return var5;
@@ -1570,7 +1629,7 @@
 
     public final void spawnParticle(String var1, float var2, float var3, float var4, float var5, float var6, float var7) {
         for(int var8 = 0; var8 < this.worldAccesses.size(); ++var8) {
-            ((IWorldAccess)this.worldAccesses.get(var8)).spawnParticle(var1, var2, var3, var4, var5, var6, var7);
+            this.worldAccesses.get(var8).spawnParticle(var1, var2, var3, var4, var5, var6, var7);
         }
 
     }
@@ -1594,7 +1653,7 @@
 
     public final void setLevel() {
         for(int var1 = 0; var1 < this.worldAccesses.size(); ++var1) {
-            IWorldAccess var2 = (IWorldAccess)this.worldAccesses.get(var1);
+            IWorldAccess var2 = this.worldAccesses.get(var1);
 
             for(int var3 = 0; var3 < this.entityMap.entities.size(); ++var3) {
                 var2.releaseEntitySkin((Entity)this.entityMap.entities.get(var1));
@@ -1623,6 +1682,20 @@
         }
     }
 
+    public int getSeaBed(int x, int z) {
+    	// Start at water level downwards
+    	int y = this.waterLevel - 1;
+    	
+    	if (this.getBlockId(x, y, z) != Block.waterStill.blockID) return 0;
+    	
+    	while (y > 0) {
+    		y --;
+    		if (this.getBlockId(x, y, z) != Block.waterStill.blockID) break;
+    	}
+    	
+    	return y;
+    }
+    
     static {
         for(int var0 = 0; var0 <= 15; ++var0) {
             float var1 = 1.0F - (float)var0 / 15.0F;
diff -ur MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/generator/LevelGenerator.java MCP-LTS/src/minecraft/net/minecraft/game/level/generator/LevelGenerator.java
--- MCP-LTS_Clean/src/minecraft/net/minecraft/game/level/generator/LevelGenerator.java	2021-11-10 11:11:52.811206400 +0100
+++ MCP-LTS/src/minecraft/net/minecraft/game/level/generator/LevelGenerator.java	2021-12-13 14:13:05.604038900 +0100
@@ -2,6 +2,9 @@
 
 import java.util.ArrayList;
 import java.util.Random;
+
+import com.mojontwins.modloader.ModLoader;
+
 import net.minecraft.game.block.Block;
 import net.minecraft.game.block.BlockFlower;
 import net.minecraft.game.level.Spawner;
@@ -13,13 +16,13 @@
 
 public final class LevelGenerator {
     private IProgressUpdate guiLoading;
-    private int width;
-    private int depth;
-    private int height;
-    private Random rand = new Random();
+    public int width;
+    public int depth;
+    public int height;
+    public Random rand = new Random();
     private byte[] blocksByteArray;
-    private int waterLevel;
-    private int groundLevel;
+    public int waterLevel;
+    public int groundLevel;
     public boolean islandGen = false;
     public boolean floatingGen = false;
     public boolean flatGen = false;
@@ -33,44 +36,47 @@
         this.guiLoading = var1;
     }
 
-    public final World generate(String var1, int var2, int var3, int var4) {
-        int var5 = 1;
+    public final World generate(String var1, int width, int depth, int height) {
+    	System.out.println ("LevelGenerator.generate");
+        int genPasses = 1;
         if (this.floatingGen) {
-            var5 = (var4 - 64) / 48 + 1;
+            genPasses = (height - 64) / 48 + 1;
         }
 
-        this.phases = 13 + var5 * 4;
+        this.phases = 13 + genPasses * 4;
         this.guiLoading.displayProgressMessage("Generating level");
-        World var6;
-        (var6 = new World()).waterLevel = this.waterLevel;
-        var6.groundLevel = this.groundLevel;
-        this.width = var2;
-        this.depth = var3;
-        this.height = var4;
-        this.blocksByteArray = new byte[var2 * var3 * var4];
-
-        int var7;
-        LevelGenerator var9;
-        int var21;
-        int var25;
-        int var31;
-        int var45;
-        int var51;
-        int var52;
-        int var53;
-        int var56;
-        for(var7 = 0; var7 < var5; ++var7) {
-            this.waterLevel = var4 - 32 - var7 * 48;
+        
+        World world = new World();
+        world.waterLevel = this.waterLevel;
+        world.groundLevel = this.groundLevel;
+        world.levelType = this.levelType;
+        
+        this.width = width;
+        this.depth = depth;
+        this.height = height;
+        this.blocksByteArray = new byte[width * depth * height];
+
+        int genPass;
+        LevelGenerator levelGenerator;
+
+        for(genPass = 0; genPass < genPasses; ++genPass) {
+            this.waterLevel = height - 32 - genPass * 48;
             this.groundLevel = this.waterLevel - 2;
-            int[] var8;
-            NoiseGeneratorOctaves var13;
-            int var22;
-            int[] var46;
+            
+            // ModLoader
+            this.waterLevel += ModLoader.waterLevelAdjust(this);
+            
+            int[] heightMap;            
+            int[] tempTempHeightMap;
+            
+            // Generates a basic height map
+            // Using several noise generators.
+
             if (this.flatGen) {
-                var8 = new int[var2 * var3];
+                heightMap = new int[width * depth];
 
-                for(var45 = 0; var45 < var8.length; ++var45) {
-                    var8[var45] = 0;
+                for(int i = 0; i < heightMap.length; ++i) {
+                    heightMap[i] = 0;
                 }
 
                 this.loadingBar();
@@ -78,61 +84,71 @@
             } else {
                 this.guiLoading.displayLoadingString("Raising..");
                 this.loadingBar();
-                var9 = this;
-                NoiseGeneratorDistort var10 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
-                NoiseGeneratorDistort var11 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
-                NoiseGeneratorOctaves var12 = new NoiseGeneratorOctaves(this.rand, 6);
-                var13 = new NoiseGeneratorOctaves(this.rand, 2);
-                int[] var14 = new int[this.width * this.depth];
-                var22 = 0;
+                
+                levelGenerator = this;
+
+                NoiseGeneratorDistort ngd1 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
+                NoiseGeneratorDistort ngd2 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
+                NoiseGeneratorOctaves noiseGenO1 = new NoiseGeneratorOctaves(this.rand, 6);
+                NoiseGeneratorOctaves noiseGenO2 = new NoiseGeneratorOctaves(this.rand, 2);
+                
+                int[] tempHeightMap = new int[this.width * this.depth];                
+                int var22 = 0;
 
                 label349:
-                while(true) {
-                    if (var22 >= var9.width) {
-                        var8 = var14;
+                while(true) { 						// outer loop
+                    
+                	// This inner loop is the "Eroding" phase and is performed after the
+                	// "Raising" phase finishes (the outer loop. 
+                	if (var22 >= levelGenerator.width) {
+                        heightMap = tempHeightMap;
                         this.guiLoading.displayLoadingString("Eroding..");
                         this.loadingBar();
-                        var46 = var14;
-                        var9 = this;
-                        var11 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
-                        NoiseGeneratorDistort var50 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
-                        var52 = 0;
-
+                        
+                        tempTempHeightMap = tempHeightMap;
+                        levelGenerator = this;
+                        
+                        ngd1 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
+                        ngd2 = new NoiseGeneratorDistort(new NoiseGeneratorOctaves(this.rand, 8), new NoiseGeneratorOctaves(this.rand, 8));
+                        
+                        int x = 0;
                         while(true) {
-                            if (var52 >= var9.width) {
-                                break label349;
+                            if (x >= levelGenerator.width) {
+                                break label349; 	// Terminates the outer loop
                             }
 
-                            var9.setNextPhase((float)var52 * 100.0F / (float)(var9.width - 1));
+                            levelGenerator.setNextPhase((float)x * 100.0F / (float)(levelGenerator.width - 1));
 
-                            for(var53 = 0; var53 < var9.depth; ++var53) {
-                                double var20 = var11.generateNoise((double)(var52 << 1), (double)(var53 << 1)) / 8.0D;
-                                var22 = var50.generateNoise((double)(var52 << 1), (double)(var53 << 1)) > 0.0D ? 1 : 0;
-                                if (var20 > 2.0D) {
-                                    int var58 = ((var46[var52 + var53 * var9.width] - var22) / 2 << 1) + var22;
-                                    var46[var52 + var53 * var9.width] = var58;
+                            for(int z = 0; z < levelGenerator.depth; ++z) {
+                                double noiseValue = ngd1.generateNoise((double)(x << 1), (double)(z << 1)) / 8.0D;
+                                int variation = ngd2.generateNoise((double)(x << 1), (double)(z << 1)) > 0.0D ? 1 : 0;
+                                if (noiseValue > 2.0D) {
+                                    int floorLevel = ((tempTempHeightMap[x + z * levelGenerator.width] - variation) / 2 << 1) + variation;
+                                    tempTempHeightMap[x + z * levelGenerator.width] = floorLevel;
                                 }
                             }
 
-                            ++var52;
+                            ++x;
                         }
                     }
 
-                    double var23 = Math.abs(((double)var22 / ((double)var9.width - 1.0D) - 0.5D) * 2.0D);
-                    var9.setNextPhase((float)var22 * 100.0F / (float)(var9.width - 1));
+                	// So this bit is run before the above block of code:                	
+                    double var23 = Math.abs(((double)var22 / ((double)levelGenerator.width - 1.0D) - 0.5D) * 2.0D);
+                    levelGenerator.setNextPhase((float)var22 * 100.0F / (float)(levelGenerator.width - 1));
 
-                    for(var25 = 0; var25 < var9.depth; ++var25) {
-                        double var26 = Math.abs(((double)var25 / ((double)var9.depth - 1.0D) - 0.5D) * 2.0D);
-                        double var28 = var10.generateNoise((double)((float)var22 * 1.3F), (double)((float)var25 * 1.3F)) / 6.0D + -4.0D;
-                        double var30 = var11.generateNoise((double)((float)var22 * 1.3F), (double)((float)var25 * 1.3F)) / 5.0D + 10.0D + -4.0D;
-                        if (var12.generateNoise((double)var22, (double)var25) / 8.0D > 0.0D) {
+                    for(int z = 0; z < levelGenerator.depth; ++z) {
+                        double var26 = Math.abs(((double)z / ((double)levelGenerator.depth - 1.0D) - 0.5D) * 2.0D);
+                        double var28 = ngd1.generateNoise((double)((float)var22 * 1.3F), (double)((float)z * 1.3F)) / 6.0D + -4.0D;
+                        double var30 = ngd2.generateNoise((double)((float)var22 * 1.3F), (double)((float)z * 1.3F)) / 5.0D + 10.0D + -4.0D;
+                        if (noiseGenO1.generateNoise((double)var22, (double)z) / 8.0D > 0.0D) {
                             var30 = var28;
                         }
 
-                        double var34 = Math.max(var28, var30) / 2.0D;
-                        if (var9.islandGen) {
+                        double floorLevel = Math.max(var28, var30) / 2.0D;
+                        
+                        if (levelGenerator.islandGen) {
                             double var36 = Math.sqrt(var23 * var23 + var26 * var26) * 1.2000000476837158D;
-                            double var39 = var13.generateNoise((double)((float)var22 * 0.05F), (double)((float)var25 * 0.05F)) / 4.0D + 1.0D;
+                            double var39 = noiseGenO2.generateNoise((double)((float)var22 * 0.05F), (double)((float)z * 0.05F)) / 4.0D + 1.0D;
                             if ((var36 = Math.max(Math.min(var36, var39), Math.max(var23, var26))) > 1.0D) {
                                 var36 = 1.0D;
                             }
@@ -142,177 +158,215 @@
                             }
 
                             var36 *= var36;
-                            if ((var34 = var34 * (1.0D - var36) - var36 * 10.0D + 5.0D) < 0.0D) {
-                                var34 -= var34 * var34 * 0.20000000298023224D;
+                            if ((floorLevel = floorLevel * (1.0D - var36) - var36 * 10.0D + 5.0D) < 0.0D) {
+                                floorLevel -= floorLevel * floorLevel * 0.20000000298023224D;
                             }
-                        } else if (var34 < 0.0D) {
-                            var34 *= 0.8D;
+                        } else if (floorLevel < 0.0D) {
+                            floorLevel *= 0.8D;
                         }
 
-                        var14[var22 + var25 * var9.width] = (int)var34;
+                        if (this.levelType > 2) floorLevel = ModLoader.adjustFloorLevel(this, floorLevel);
+                        
+                        tempHeightMap[var22 + z * levelGenerator.width] = (int)floorLevel;
                     }
 
                     ++var22;
                 }
             }
+            
+            // Use this hook to modify the height map which, at this point, is centered around 0.
+            if (this.levelType >3) ModLoader.adjustHeightMap (this, heightMap);
+
+            // Fills the block array with basic blocks (empty / dirt / stone)
+            // based on the heightMap.
 
             this.guiLoading.displayLoadingString("Soiling..");
             this.loadingBar();
-            var46 = var8;
-            var9 = this;
-            int var49 = this.width;
-            var51 = this.depth;
-            var52 = this.height;
-            NoiseGeneratorOctaves var54 = new NoiseGeneratorOctaves(this.rand, 8);
-            NoiseGeneratorOctaves var55 = new NoiseGeneratorOctaves(this.rand, 8);
-
-            for(var21 = 0; var21 < var49; ++var21) {
-                double var57 = Math.abs(((double)var21 / ((double)var49 - 1.0D) - 0.5D) * 2.0D);
-                var9.setNextPhase((float)var21 * 100.0F / (float)(var49 - 1));
-
-                for(int var24 = 0; var24 < var51; ++var24) {
-                    double var64 = Math.abs(((double)var24 / ((double)var51 - 1.0D) - 0.5D) * 2.0D);
-                    double var27 = (var27 = Math.max(var57, var64)) * var27 * var27;
-                    int var29 = (int)(var54.generateNoise((double)var21, (double)var24) / 24.0D) - 4;
-                    int var72;
-                    var31 = (var72 = var46[var21 + var24 * var49] + var9.waterLevel) + var29;
-                    var46[var21 + var24 * var49] = Math.max(var72, var31);
-                    if (var46[var21 + var24 * var49] > var52 - 2) {
-                        var46[var21 + var24 * var49] = var52 - 2;
+            
+            tempTempHeightMap = heightMap;
+            levelGenerator = this;
+            
+            NoiseGeneratorOctaves noiseGenO1 = new NoiseGeneratorOctaves(this.rand, 8);
+            NoiseGeneratorOctaves noiseGenO2 = new NoiseGeneratorOctaves(this.rand, 8);
+
+            for(int x = 0; x < this.width; ++x) {
+                double xx = Math.abs(((double)x / ((double)this.width - 1.0D) - 0.5D) * 2.0D);
+                levelGenerator.setNextPhase((float)x * 100.0F / (float)(this.width - 1));
+
+                for(int z = 0; z < this.depth; ++z) {
+                    double zz = Math.abs(((double)z / ((double)this.depth - 1.0D) - 0.5D) * 2.0D);
+                    double var27 = (var27 = Math.max(xx, zz)) * var27 * var27;
+
+                    int noiseVal = (int)(noiseGenO1.generateNoise((double)x, (double)z) / 24.0D) - 4;
+                    
+                    int floorLevel = tempTempHeightMap[x + z * this.width] + levelGenerator.waterLevel;
+                    int fillLevel = floorLevel + noiseVal;
+                    
+                    tempTempHeightMap[x + z * this.width] = Math.max(floorLevel, fillLevel);
+                    
+                    if (tempTempHeightMap[x + z * this.width] > this.height - 2) {
+                        tempTempHeightMap[x + z * this.width] = this.height - 2;
                     }
 
-                    if (var46[var21 + var24 * var49] <= 0) {
-                        var46[var21 + var24 * var49] = 1;
+                    if (tempTempHeightMap[x + z * this.width] <= 0) {
+                        tempTempHeightMap[x + z * this.width] = 1;
                     }
 
                     double var32;
-                    int var76;
-                    if ((var76 = (int)((double)((int)(Math.sqrt(Math.abs(var32 = var55.generateNoise((double)var21 * 2.3D, (double)var24 * 2.3D) / 24.0D)) * Math.signum(var32) * 20.0D) + var9.waterLevel) * (1.0D - var27) + var27 * (double)var9.height)) > var9.waterLevel) {
-                        var76 = var9.height;
-                    }
-
-                    for(int var35 = 0; var35 < var52; ++var35) {
-                        int var78 = (var35 * var9.depth + var24) * var9.width + var21;
-                        int var37 = 0;
-                        if (var35 <= var72) {
-                            var37 = Block.dirt.blockID;
-                        }
-
-                        if (var35 <= var31) {
-                            var37 = Block.stone.blockID;
-                        }
-
-                        if (var9.floatingGen && var35 < var76) {
-                            var37 = 0;
+                    int islandBottomLevel;
+                    if ((islandBottomLevel = (int)((double)((int)(Math.sqrt(Math.abs(var32 = noiseGenO2.generateNoise((double)x * 2.3D, (double)z * 2.3D) / 24.0D)) * Math.signum(var32) * 20.0D) + levelGenerator.waterLevel) * (1.0D - var27) + var27 * (double)levelGenerator.height)) > levelGenerator.waterLevel) {
+                        islandBottomLevel = levelGenerator.height;
+                    }
+
+                    for(int y = 0; y < this.height; ++y) {
+                        int idx = (y * levelGenerator.depth + z) * levelGenerator.width + x;
+                        int blockID; 
+                        
+                        // ModLoader
+                        if ((blockID = ModLoader.getSoilingBlockID(this, y, floorLevel, fillLevel, islandBottomLevel)) == -1) {
+	                        blockID = 0;
+	                        if (y <= floorLevel) {
+	                            blockID = Block.dirt.blockID;
+	                        }
+	
+	                        if (y <= fillLevel) {
+	                            blockID = Block.stone.blockID;
+	                        }
+	
+	                        if (levelGenerator.floatingGen && y < islandBottomLevel) {
+	                            blockID = 0;
+	                        }
                         }
 
-                        if (var9.blocksByteArray[var78] == 0) {
-                            var9.blocksByteArray[var78] = (byte)var37;
+                        if (levelGenerator.blocksByteArray[idx] == 0) {
+                            levelGenerator.blocksByteArray[idx] = (byte)blockID;
                         }
                     }
                 }
             }
 
+            // Adds gravel and/or sand to the surface,
+            // based (again) in the (adjusted) height map.
+            
             this.guiLoading.displayLoadingString("Growing..");
             this.loadingBar();
-            var46 = var8;
-            var9 = this;
-            var49 = this.width;
-            var51 = this.depth;
-            var13 = new NoiseGeneratorOctaves(this.rand, 8);
-            var54 = new NoiseGeneratorOctaves(this.rand, 8);
-            var56 = this.waterLevel - 1;
+            tempTempHeightMap = heightMap;
+            levelGenerator = this;
+            
+            noiseGenO1 = new NoiseGeneratorOctaves(this.rand, 8);
+            noiseGenO2 = new NoiseGeneratorOctaves(this.rand, 8);
+
+            int beachLevel = this.waterLevel - 1;
             if (this.levelType == 2) {
-                var56 += 2;
+                beachLevel += 2;
             }
+            
+            // ModLoader
+            if (this.levelType > 2) beachLevel = ModLoader.adjustBeachLevel(this, beachLevel);
 
-            for(var21 = 0; var21 < var49; ++var21) {
-                var9.setNextPhase((float)var21 * 100.0F / (float)(var49 - 1));
+            for(int x = 0; x < this.width; ++x) {
+                levelGenerator.setNextPhase((float)x * 100.0F / (float)(this.width - 1));
 
-                for(var22 = 0; var22 < var51; ++var22) {
-                    boolean var59 = var13.generateNoise((double)var21, (double)var22) > 8.0D;
-                    if (var9.islandGen) {
-                        var59 = var13.generateNoise((double)var21, (double)var22) > -8.0D;
+                for(int z = 0; z < this.depth; ++z) {
+                    boolean var59 = noiseGenO1.generateNoise((double)x, (double)z) > 8.0D;
+                    
+                    if (levelGenerator.islandGen) {
+                        var59 = noiseGenO1.generateNoise((double)x, (double)z) > -8.0D;
                     }
 
-                    if (var9.levelType == 2) {
-                        var59 = var13.generateNoise((double)var21, (double)var22) > -32.0D;
+                    if (levelGenerator.levelType == 2) {
+                        var59 = noiseGenO1.generateNoise((double)x, (double)z) > -32.0D;
                     }
 
-                    boolean var61 = var54.generateNoise((double)var21, (double)var22) > 12.0D;
-                    if (var9.levelType == 1 || var9.levelType == 3) {
-                        var59 = var13.generateNoise((double)var21, (double)var22) > -8.0D;
+                    boolean var61 = noiseGenO2.generateNoise((double)x, (double)z) > 12.0D;
+                    if (levelGenerator.levelType == 1 || levelGenerator.levelType == 3) {
+                        var59 = noiseGenO1.generateNoise((double)x, (double)z) > -8.0D;
                     }
+                    
+                    // ModLoader
+                    if (levelGenerator.levelType > 3) var59 = ModLoader.shouldGrow(this, noiseGenO1.generateNoise((double)x, (double)z), var59); 
 
-                    int var65 = ((var25 = var46[var21 + var22 * var49]) * var9.depth + var22) * var9.width + var21;
-                    int var67;
-                    if (((var67 = var9.blocksByteArray[((var25 + 1) * var9.depth + var22) * var9.width + var21] & 255) == Block.waterMoving.blockID || var67 == Block.waterStill.blockID || var67 == 0) && var25 <= var9.waterLevel - 1 && var61) {
-                        var9.blocksByteArray[var65] = (byte)Block.gravel.blockID;
+                    int floorLevel = tempTempHeightMap[x + z * this.width];
+                    int idx = (floorLevel * levelGenerator.depth + z) * levelGenerator.width + x;
+                    int blockID = levelGenerator.blocksByteArray[((floorLevel + 1) * levelGenerator.depth + z) * levelGenerator.width + x] & 255;
+                    
+                    if ((blockID == Block.waterMoving.blockID || blockID == Block.waterStill.blockID || blockID == 0) && floorLevel <= levelGenerator.waterLevel - 1 && var61) {
+                        levelGenerator.blocksByteArray[idx] = (byte)Block.gravel.blockID;
                     }
 
-                    if (var67 == 0) {
-                        int var69 = -1;
-                        if (var25 <= var56 && var59) {
-                            var69 = Block.sand.blockID;
-                            if (var9.levelType == 1) {
-                                var69 = Block.grass.blockID;
-                            }
+                    if (blockID == 0) {
+                        int newBlockID = -1;
+                        if (floorLevel <= beachLevel && var59) {
+                        	// ModLoader
+                        	
+                        	if ((newBlockID = ModLoader.getGrowingBlockID(this)) == -1)  {                        	
+	                            newBlockID = Block.sand.blockID;
+	                            if (levelGenerator.levelType == 1) {
+	                                newBlockID = Block.grass.blockID;
+	                            }
+                        	}
                         }
 
-                        if (var9.blocksByteArray[var65] != 0 && var69 > 0) {
-                            var9.blocksByteArray[var65] = (byte)var69;
+                        if (levelGenerator.blocksByteArray[idx] != 0 && newBlockID > 0) {
+                            levelGenerator.blocksByteArray[idx] = (byte)newBlockID;
                         }
                     }
                 }
             }
         }
 
+        // Digs caves based upon a very strange set of random calculations
+        
         this.guiLoading.displayLoadingString("Carving..");
         this.loadingBar();
-        var9 = this;
-        var51 = this.width;
-        var52 = this.depth;
-        var53 = this.height;
-        var56 = var51 * var52 * var53 / 256 / 64 << 1;
-
-        for(var21 = 0; var21 < var56; ++var21) {
-            var9.setNextPhase((float)var21 * 100.0F / (float)(var56 - 1));
-            float var60 = var9.rand.nextFloat() * (float)var51;
-            float var63 = var9.rand.nextFloat() * (float)var53;
-            float var62 = var9.rand.nextFloat() * (float)var52;
-            var25 = (int)((var9.rand.nextFloat() + var9.rand.nextFloat()) * 200.0F);
-            float var66 = var9.rand.nextFloat() * 3.1415927F * 2.0F;
-            float var68 = 0.0F;
-            float var71 = var9.rand.nextFloat() * 3.1415927F * 2.0F;
-            float var70 = 0.0F;
-            float var73 = var9.rand.nextFloat() * var9.rand.nextFloat();
-
-            for(var31 = 0; var31 < var25; ++var31) {
-                var60 += MathHelper.sin(var66) * MathHelper.cos(var71);
-                var62 += MathHelper.cos(var66) * MathHelper.cos(var71);
-                var63 += MathHelper.sin(var71);
-                var66 += var68 * 0.2F;
-                var68 = (var68 *= 0.9F) + (var9.rand.nextFloat() - var9.rand.nextFloat());
-                var71 = (var71 + var70 * 0.5F) * 0.5F;
-                var70 = (var70 *= 0.75F) + (var9.rand.nextFloat() - var9.rand.nextFloat());
-                if (var9.rand.nextFloat() >= 0.25F) {
-                    float var74 = var60 + (var9.rand.nextFloat() * 4.0F - 2.0F) * 0.2F;
-                    float var33 = var63 + (var9.rand.nextFloat() * 4.0F - 2.0F) * 0.2F;
-                    float var77 = var62 + (var9.rand.nextFloat() * 4.0F - 2.0F) * 0.2F;
-                    float var75 = ((float)var9.height - var33) / (float)var9.height;
+        levelGenerator = this;
+
+        int carvingIterations = this.width * this.depth * this.height / 256 / 64 << 1;
+
+        for(int i = 0; i < carvingIterations; ++i) {
+            levelGenerator.setNextPhase((float)i * 100.0F / (float)(carvingIterations - 1));
+            float ox = levelGenerator.rand.nextFloat() * (float)this.width;
+            float oy = levelGenerator.rand.nextFloat() * (float)this.height;
+            float oz = levelGenerator.rand.nextFloat() * (float)this.depth;
+            
+            int carvingDepth = (int)((levelGenerator.rand.nextFloat() + levelGenerator.rand.nextFloat()) * 200.0F);
+            
+            float angle1 = levelGenerator.rand.nextFloat() * 3.1415927F * 2.0F;
+            float dAngle1 = 0.0F;
+            float angle2 = levelGenerator.rand.nextFloat() * 3.1415927F * 2.0F;
+            float dAngle2 = 0.0F;
+            float var73 = levelGenerator.rand.nextFloat() * levelGenerator.rand.nextFloat();
+
+            for(int j = 0; j < carvingDepth; ++j) {
+                ox += MathHelper.sin(angle1) * MathHelper.cos(angle2);
+                oz += MathHelper.cos(angle1) * MathHelper.cos(angle2);
+                oy += MathHelper.sin(angle2);
+                
+                angle1 += dAngle1 * 0.2F;
+                dAngle1 = (dAngle1 *= 0.9F) + (levelGenerator.rand.nextFloat() - levelGenerator.rand.nextFloat());
+                angle2 = (angle2 + dAngle2 * 0.5F) * 0.5F;
+                dAngle2 = (dAngle2 *= 0.75F) + (levelGenerator.rand.nextFloat() - levelGenerator.rand.nextFloat());
+
+                if (levelGenerator.rand.nextFloat() >= 0.25F) {
+                    float var74 = ox + (levelGenerator.rand.nextFloat() * 4.0F - 2.0F) * 0.2F;
+                    float var33 = oy + (levelGenerator.rand.nextFloat() * 4.0F - 2.0F) * 0.2F;
+                    float var77 = oz + (levelGenerator.rand.nextFloat() * 4.0F - 2.0F) * 0.2F;
+
+                    float var75 = ((float)levelGenerator.height - var33) / (float)levelGenerator.height;
                     float var79 = 1.2F + (var75 * 3.5F + 1.0F) * var73;
-                    float var80 = MathHelper.sin((float)var31 * 3.1415927F / (float)var25) * var79;
+                    float var80 = MathHelper.sin((float)j * 3.1415927F / (float)carvingDepth) * var79;
 
-                    for(var5 = (int)(var74 - var80); var5 <= (int)(var74 + var80); ++var5) {
-                        for(int var81 = (int)(var33 - var80); var81 <= (int)(var33 + var80); ++var81) {
-                            for(int var40 = (int)(var77 - var80); var40 <= (int)(var77 + var80); ++var40) {
-                                float var41 = (float)var5 - var74;
-                                float var42 = (float)var81 - var33;
-                                float var48 = (float)var40 - var77;
-                                if (var41 * var41 + var42 * var42 * 2.0F + var48 * var48 < var80 * var80 && var5 > 0 && var81 > 0 && var40 > 0 && var5 < var9.width - 1 && var81 < var9.height - 1 && var40 < var9.depth - 1) {
-                                    var7 = (var81 * var9.depth + var40) * var9.width + var5;
-                                    if (var9.blocksByteArray[var7] == Block.stone.blockID) {
-                                        var9.blocksByteArray[var7] = 0;
+                    for(int x = (int)(var74 - var80); x <= (int)(var74 + var80); ++x) {
+                        for(int y = (int)(var33 - var80); y <= (int)(var33 + var80); ++y) {
+                            for(int z = (int)(var77 - var80); z <= (int)(var77 + var80); ++z) {
+                                float var41 = (float)x - var74;
+                                float var42 = (float)y - var33;
+                                float var48 = (float)z - var77;
+                                
+                                if (var41 * var41 + var42 * var42 * 2.0F + var48 * var48 < var80 * var80 && x > 0 && y > 0 && z > 0 && x < levelGenerator.width - 1 && y < levelGenerator.height - 1 && z < levelGenerator.depth - 1) {
+                                    int idx = (y * levelGenerator.depth + z) * levelGenerator.width + x;
+                                    if (levelGenerator.blocksByteArray[idx] == Block.stone.blockID) {
+                                        levelGenerator.blocksByteArray[idx] = 0;
                                     }
                                 }
                             }
@@ -322,19 +376,27 @@
             }
         }
 
-        var7 = this.populateOre(Block.oreCoal.blockID, 1000, 10, (var4 << 2) / 5);
-        int var44 = this.populateOre(Block.oreIron.blockID, 800, 8, var4 * 3 / 5);
-        var45 = this.populateOre(Block.oreGold.blockID, 500, 6, (var4 << 1) / 5);
-        var5 = this.populateOre(Block.oreDiamond.blockID, 800, 2, var4 / 5);
-        System.out.println("Coal: " + var7 + ", Iron: " + var44 + ", Gold: " + var45 + ", Diamond: " + var5);
+        // Generates ores in different quantities and from certain heights
+        // Block ID, density, chance, height
+        
+        int coalBlocks = this.populateOre(Block.oreCoal.blockID, 1000, 10, (height << 2) / 5);
+        int irenBlocks = this.populateOre(Block.oreIron.blockID, 800, 8, height * 3 / 5);
+        int goldBlocks = this.populateOre(Block.oreGold.blockID, 500, 6, (height << 1) / 5);
+        int diamondBlocks = this.populateOre(Block.oreDiamond.blockID, 800, 2, height / 5);
+        System.out.println("Coal: " + coalBlocks + ", Iron: " + irenBlocks + ", Gold: " + goldBlocks + ", Diamond: " + diamondBlocks);
+
+        // Adds lava
+        
         this.guiLoading.displayLoadingString("Melting..");
         this.loadingBar();
         this.lavaGen();
-        var6.cloudHeight = var4 + 2;
+        
+        world.cloudHeight = height + 2;
+        
         if (this.floatingGen) {
             this.groundLevel = -128;
             this.waterLevel = this.groundLevel + 1;
-            var6.cloudHeight = -16;
+            world.cloudHeight = -16;
         } else if (!this.islandGen) {
             this.groundLevel = this.waterLevel + 1;
             this.waterLevel = this.groundLevel - 16;
@@ -342,152 +404,232 @@
             this.groundLevel = this.waterLevel - 9;
         }
 
+        // Adds water
+        
         this.guiLoading.displayLoadingString("Watering..");
         this.loadingBar();
         this.liquidThemeSpawner();
         if (!this.floatingGen) {
-            var5 = Block.waterStill.blockID;
-            if (this.levelType == 1) {
-                var5 = Block.lavaStill.blockID;
-            }
-
-            for(var7 = 0; var7 < var2; ++var7) {
-                this.floodFill(var7, this.waterLevel - 1, 0, 0, var5);
-                this.floodFill(var7, this.waterLevel - 1, var3 - 1, 0, var5);
-            }
-
-            for(var7 = 0; var7 < var3; ++var7) {
-                this.floodFill(var2 - 1, this.waterLevel - 1, var7, 0, var5);
-                this.floodFill(0, this.waterLevel - 1, var7, 0, var5);
+        	int blockID; 
+        	
+        	// ModLoader
+        	if ((blockID = ModLoader.getWateringBlockID(this, false)) == -1) {    	
+	            blockID = Block.waterStill.blockID;
+	            if (this.levelType == 1) {
+	                blockID = Block.lavaStill.blockID;
+	            }
+        	}
+
+            for(int i = 0; i < width; ++i) {
+                this.floodFill(i, this.waterLevel - 1, 0, 0, blockID);
+                this.floodFill(i, this.waterLevel - 1, depth - 1, 0, blockID);
+            }
+
+            for(int i = 0; i < depth; ++i) {
+                this.floodFill(width - 1, this.waterLevel - 1, i, 0, blockID);
+                this.floodFill(0, this.waterLevel - 1, i, 0, blockID);
             }
         }
+        
+        // Adjusts colours and visuals
 
         if (this.levelType == 0) {
-            var6.skyColor = 10079487;
-            var6.fogColor = 16777215;
-            var6.cloudColor = 16777215;
+            world.skyColor = 10079487;
+            world.fogColor = 16777215;
+            world.cloudColor = 16777215;
         }
 
         if (this.levelType == 1) {
-            var6.cloudColor = 2164736;
-            var6.fogColor = 1049600;
-            var6.skyColor = 1049600;
-            var6.skylightSubtracted = var6.skyBrightness = 7;
-            var6.defaultFluid = Block.lavaMoving.blockID;
+            world.cloudColor = 2164736;
+            world.fogColor = 1049600;
+            world.skyColor = 1049600;
+            world.skylightSubtracted = world.skyBrightness = 7;
+            world.defaultFluid = Block.lavaMoving.blockID;
             if (this.floatingGen) {
-                var6.cloudHeight = var4 + 2;
+                world.cloudHeight = height + 2;
                 this.waterLevel = -16;
             }
         }
 
         if (this.levelType == 2) {
-            var6.skyColor = 13033215;
-            var6.fogColor = 13033215;
-            var6.cloudColor = 15658751;
-            var6.skylightSubtracted = var6.skyBrightness = 15;
-            var6.skyBrightness = 16;
-            var6.cloudHeight = var4 + 64;
+            world.skyColor = 13033215;
+            world.fogColor = 13033215;
+            world.cloudColor = 15658751;
+            world.skylightSubtracted = world.skyBrightness = 15;
+            world.skyBrightness = 16;
+            world.cloudHeight = height + 64;
         }
 
         if (this.levelType == 3) {
-            var6.skyColor = 7699847;
-            var6.fogColor = 5069403;
-            var6.cloudColor = 5069403;
-            var6.skylightSubtracted = var6.skyBrightness = 12;
-        }
+            world.skyColor = 7699847;
+            world.fogColor = 5069403;
+            world.cloudColor = 5069403;
+            world.skylightSubtracted = world.skyBrightness = 12;
+        }
+        
+        world.waterLevel = this.waterLevel;
+        world.groundLevel = this.groundLevel;
+        
+        // ModLoader
+        if (this.levelType > 3) ModLoader.setVisuals(this, world);
 
-        var6.waterLevel = this.waterLevel;
-        var6.groundLevel = this.groundLevel;
         this.guiLoading.displayLoadingString("Assembling..");
         this.loadingBar();
         this.setNextPhase(0.0F);
-        var6.generate(var2, var4, var3, this.blocksByteArray, (byte[])null);
+        
+        // What's this for? Sets the blocks array to the world or what?
+        // Combines several passes of "deep floating islads"?
+        
+        world.generate(width, height, depth, this.blocksByteArray, (byte[])null);
+        
+        // Build structures.
+                
         this.guiLoading.displayLoadingString("Building..");
         this.loadingBar();
         this.setNextPhase(0.0F);
-        var6.findSpawn();
-        generateHouse(var6);
+        
+        world.findSpawn();
+        generateHouse(world);
+        
+        ModLoader.hookGenerateStructures (this, world);
+        
+        // Add plants (including trees)
+        
         this.guiLoading.displayLoadingString("Planting..");
         this.loadingBar();
-        if (this.levelType != 1) {
-            this.growGrassOnDirt(var6);
-        }
-
-        this.loadingBar();
-        this.growTrees(var6);
-        if (this.levelType == 3) {
-            for(var5 = 0; var5 < 50; ++var5) {
-                this.growTrees(var6);
-            }
-        }
-
-        short var43 = 100;
-        if (this.levelType == 2) {
-            var43 = 1000;
-        }
-
-        this.loadingBar();
-        this.populateFlowersAndMushrooms(var6, Block.plantYellow, var43);
-        this.loadingBar();
-        this.populateFlowersAndMushrooms(var6, Block.plantRed, var43);
-        this.loadingBar();
-        this.populateFlowersAndMushrooms(var6, Block.mushroomBrown, 50);
-        this.loadingBar();
-        this.populateFlowersAndMushrooms(var6, Block.mushroomRed, 50);
+                
+        // ModLoader
+        if (ModLoader.overridePlanting(this, world)) {
+        	// Don't like this but can't think of a better solution
+        	this.loadingBar();
+        	this.loadingBar();
+        	this.loadingBar();
+        	this.loadingBar();
+        	this.loadingBar();
+        } else {
+	        
+	        if (this.levelType != 1) {
+	            this.growGrassOnDirt(world);
+	        }
+	
+	        this.loadingBar();
+	        this.growTrees(world);
+	        if (this.levelType == 3) {
+	            for(genPasses = 0; genPasses < 50; ++genPasses) {
+	                this.growTrees(world);
+	            }
+	        }
+	
+	        short var43 = 100;
+	        if (this.levelType == 2) {
+	            var43 = 1000;
+	        }
+	
+	        this.loadingBar();
+	        this.populateFlowersAndMushrooms(world, Block.plantYellow, var43);
+	        this.loadingBar();
+	        this.populateFlowersAndMushrooms(world, Block.plantRed, var43);
+	        this.loadingBar();
+	        this.populateFlowersAndMushrooms(world, Block.mushroomBrown, 50);
+	        this.loadingBar();
+	        this.populateFlowersAndMushrooms(world, Block.mushroomRed, 50);
+        }
+        
+        ModLoader.hookPlanting (this, world, this.rand);
+        
+        // Calculate lighting
+        
         this.guiLoading.displayLoadingString("Lighting..");
         this.loadingBar();
 
-        for(var7 = 0; var7 < 10000; ++var7) {
-            this.setNextPhase((float)(var7 * 100 / 10000));
-            var6.updateLighting();
+        for(genPass = 0; genPass < 10000; ++genPass) {
+            this.setNextPhase((float)(genPass * 100 / 10000));
+            world.updateLighting();
         }
+        
+        // Create the spawner
 
         this.guiLoading.displayLoadingString("Spawning..");
         this.loadingBar();
-        Spawner var47 = new Spawner(var6);
+        Spawner var47 = new Spawner(world);
 
-        for(var2 = 0; var2 < 1000; ++var2) {
-            this.setNextPhase((float)var2 * 100.0F / 999.0F);
+        for(width = 0; width < 1000; ++width) {
+            this.setNextPhase((float)width * 100.0F / 999.0F);
             var47.performSpawning();
         }
 
-        var6.createTime = System.currentTimeMillis();
-        var6.authorName = var1;
-        var6.name = "A Nice World";
+        world.createTime = System.currentTimeMillis();
+        world.authorName = var1;
+        world.name = "A Nice World";
         if (this.phaseBar != this.phases) {
+        	System.out.println("Wrong number of phases! Wanted " + this.phases + ", got " + this.phaseBar);
             throw new IllegalStateException("Wrong number of phases! Wanted " + this.phases + ", got " + this.phaseBar);
         } else {
-            return var6;
+        	System.out.println ("World generated!");
+            return world;
         }
     }
 
-    private static void generateHouse(World var0) {
-        int var1 = var0.xSpawn;
-        int var2 = var0.ySpawn;
-        int var3 = var0.zSpawn;
-
-        for(int var4 = var1 - 3; var4 <= var1 + 3; ++var4) {
-            for(int var5 = var2 - 2; var5 <= var2 + 2; ++var5) {
-                for(int var6 = var3 - 3; var6 <= var3 + 3; ++var6) {
-                    int var7 = var5 < var2 - 1 ? Block.obsidian.blockID : 0;
-                    if (var4 == var1 - 3 || var6 == var3 - 3 || var4 == var1 + 3 || var6 == var3 + 3 || var5 == var2 - 2 || var5 == var2 + 2) {
-                        var7 = Block.stone.blockID;
-                        if (var5 >= var2 - 1) {
-                            var7 = Block.planks.blockID;
+    /*
+     * The original house required that a 7x9x4 polihedron was empty over a flat floor
+     * which might NOT be possible, so I've made this new version which carves / raises 
+     * floor as needed.
+     */
+    private static void generateHouse(World world) {
+        int wallsBlockID = Block.planks.blockID;    // TODO: Patch with Modloader!
+
+        int x0 = world.xSpawn;
+        int y0 = world.ySpawn;
+        int z0 = world.zSpawn;
+
+        // Indev house.
+
+        for(int x = x0 - 3; x <= x0 + 3; ++x) {
+            for(int y = y0 - 2; y <= y0 + 2; ++y) {
+                for(int z = z0 - 3; z <= z0 + 3; ++z) {
+                    int blockID = 0;
+                    if (x == x0 - 3 || z == z0 - 3 || x == x0 + 3 || z == z0 + 3 || y == y0 - 2 || y == y0 + 2) {
+                        blockID = world.random.nextInt(8) == 0 ? Block.cobblestone.blockID : Block.stone.blockID;
+                        if (y >= y0 - 1) {
+                            blockID = wallsBlockID;
                         }
                     }
 
-                    if (var6 == var3 - 3 && var4 == var1 && var5 >= var2 - 1 && var5 <= var2) {
-                        var7 = 0;
+                    if (z == z0 - 3 && x == x0 && y >= y0 - 1 && y <= y0) {
+                        blockID = 0;
                     }
 
-                    var0.setBlockWithNotify(var4, var5, var6, var7);
+                    world.setBlockWithNotify(x, y, z, blockID);
                 }
             }
         }
 
-        var0.setBlockWithNotify(var1 - 3 + 1, var2, var3, Block.torch.blockID);
-        var0.setBlockWithNotify(var1 + 3 - 1, var2, var3, Block.torch.blockID);
+        // Make room in front
+
+        for(int x = x0 - 3; x <= x0 + 3; ++x) {
+            for(int y = y0 - 2; y <= y0 + 2; ++y) {
+                for(int z = z0 - 6; z <= z0 - 4; ++z) {
+                    world.setBlockWithNotify(x, y, z, 0);
+                }
+            }
+        }
+
+        // Raise floor if needed
+
+        for(int x = x0 - 3; x <= x0 + 3; ++x) {
+            for(int z = z0 - 3; z <= z0 + 3; ++z) {
+                int y = y0 - 3;
+                while (y > 0 && world.getBlockId(x, y, z) == 0) {
+                    world.setBlockWithNotify(x, y, z, Block.cobblestone.blockID);
+                    y --;
+                }
+            }
+        }     
+
+        // Torches
+
+        world.setBlockWithNotify(x0 - 3 + 1, y0, z0, Block.torch.blockID);
+        world.setBlockWithNotify(x0 + 3 - 1, y0, z0, Block.torch.blockID);
     }
 
     private void growGrassOnDirt(World var1) {
@@ -535,7 +677,7 @@
 
     }
 
-    private void populateFlowersAndMushrooms(World var1, BlockFlower var2, int var3) {
+    public void populateFlowersAndMushrooms(World var1, BlockFlower var2, int var3) {
         var3 = (int)((long)this.width * (long)this.depth * (long)this.height * (long)var3 / 1600000L);
 
         for(int var4 = 0; var4 < var3; ++var4) {
@@ -619,10 +761,15 @@
     }
 
     private void liquidThemeSpawner() {
-        int var1 = Block.waterStill.blockID;
-        if (this.levelType == 1) {
-            var1 = Block.lavaStill.blockID;
-        }
+    	int var1;
+    	
+    	// ModLoader
+    	if ((var1 = ModLoader.getWateringBlockID(this, true)) == -1) {    	
+	        var1 = Block.waterStill.blockID;
+	        if (this.levelType == 1) {
+	            var1 = Block.lavaStill.blockID;
+	        }
+    	}
 
         int var2 = this.width * this.depth * this.height / 1000;
 
Only in MCP-LTS/src/minecraft: particles.png
